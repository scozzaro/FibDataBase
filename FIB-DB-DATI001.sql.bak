/******************************************************************************/
/****        Generated by IBExpert 2015.12.21.1 01/11/2022 18:50:09        ****/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES NONE;

SET CLIENTLIB 'C:\The Fox 11\fbclient.dll';

CREATE DATABASE 'C:\The Fox 11\Dati 3.0\Fib-DB-DATI004.FDB'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 4096
DEFAULT CHARACTER SET NONE COLLATION NONE;



/******************************************************************************/
/****                     User defined functions (UDF)                     ****/
/******************************************************************************/
 


/******************************************************************************/
/****                               Domains                                ****/
/******************************************************************************/

CREATE DOMAIN DM_BOOLEAN AS
CHAR(1)
DEFAULT 'F';


CREATE DOMAIN DM_STR100 AS
VARCHAR(100) CHARACTER SET WIN1252;



/******************************************************************************/
/****                              Generators                              ****/
/******************************************************************************/

CREATE GENERATOR ARTAGE_IDX_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR ARTAGE_IDX_GEN TO 0;

CREATE GENERATOR ARTCON_IDX_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR ARTCON_IDX_GEN TO 0;

CREATE GENERATOR ARTGIA2_IDX_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR ARTGIA2_IDX_GEN TO 0;

CREATE GENERATOR ARTLISTCLI_IDX_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR ARTLISTCLI_IDX_GEN TO 0;

CREATE GENERATOR ARTPRZSP_IDX_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR ARTPRZSP_IDX_GEN TO 0;

CREATE GENERATOR ARTPRZVAR_IDX_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR ARTPRZVAR_IDX_GEN TO 0;

CREATE GENERATOR CAUSDETT_IDM_INC START WITH 0 INCREMENT BY 1;
SET GENERATOR CAUSDETT_IDM_INC TO 51;

CREATE GENERATOR CESPITIAMM_IDM_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR CESPITIAMM_IDM_GEN TO 0;

CREATE GENERATOR CESPITI_IDX_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR CESPITI_IDX_GEN TO 0;

CREATE GENERATOR CLIDOCDET_IDM_INC START WITH 0 INCREMENT BY 1;
SET GENERATOR CLIDOCDET_IDM_INC TO 14;

CREATE GENERATOR CLIDOC_IDX_INC START WITH 0 INCREMENT BY 1;
SET GENERATOR CLIDOC_IDX_INC TO 13;

CREATE GENERATOR CLIFOR_IDX_INC START WITH 0 INCREMENT BY 1;
SET GENERATOR CLIFOR_IDX_INC TO 3;

CREATE GENERATOR FORDOCDET_IDM_INC START WITH 0 INCREMENT BY 1;
SET GENERATOR FORDOCDET_IDM_INC TO 2;

CREATE GENERATOR FORDOC_IDX_INC START WITH 0 INCREMENT BY 1;
SET GENERATOR FORDOC_IDX_INC TO 1;

CREATE GENERATOR GEN_CLIFORSLEG_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_CLIFORSLEG_ID TO 0;

CREATE GENERATOR GEN_CLISCOCAT_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_CLISCOCAT_ID TO 0;

CREATE GENERATOR GEN_LAVORI_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_LAVORI_ID TO 0;

CREATE GENERATOR GEN_NUM_ARTICOLI START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_NUM_ARTICOLI TO 1000;

CREATE GENERATOR GEN_RAPPGENDIP_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_RAPPGENDIP_ID TO 0;

CREATE GENERATOR GEN_RAPPGEN_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_RAPPGEN_ID TO 0;

CREATE GENERATOR GEN_SERVIZI_DET_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_SERVIZI_DET_ID TO 0;

CREATE GENERATOR GEN_SERVIZI_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_SERVIZI_ID TO 0;

CREATE GENERATOR IMPIANTO_IDX_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR IMPIANTO_IDX_GEN TO 0;

CREATE GENERATOR INFODB_IDX_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR INFODB_IDX_GEN TO 0;

CREATE GENERATOR LIQIVA_IDX_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR LIQIVA_IDX_GEN TO 0;

CREATE GENERATOR LOTTODET_IDX_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR LOTTODET_IDX_GEN TO 0;

CREATE GENERATOR LOTTO_IDX_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR LOTTO_IDX_GEN TO 0;

CREATE GENERATOR MOVFAT_CONTA_INC START WITH 0 INCREMENT BY 1;
SET GENERATOR MOVFAT_CONTA_INC TO 1;

CREATE GENERATOR MOVNOTA_CONTA_INC START WITH 0 INCREMENT BY 1;
SET GENERATOR MOVNOTA_CONTA_INC TO 10;

CREATE GENERATOR PLANASS_IDX_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR PLANASS_IDX_GEN TO 0;

CREATE GENERATOR PMCONTACTIDGEN START WITH 0 INCREMENT BY 1;
SET GENERATOR PMCONTACTIDGEN TO 0;

CREATE GENERATOR PMEVENTIDGEN START WITH 0 INCREMENT BY 1;
SET GENERATOR PMEVENTIDGEN TO 0;

CREATE GENERATOR PMRESOURCEIDGEN START WITH 0 INCREMENT BY 1;
SET GENERATOR PMRESOURCEIDGEN TO 0;

CREATE GENERATOR PMTASKIDGEN START WITH 0 INCREMENT BY 1;
SET GENERATOR PMTASKIDGEN TO 0;

CREATE GENERATOR PNOTA_IDX_INC START WITH 0 INCREMENT BY 1;
SET GENERATOR PNOTA_IDX_INC TO 5;

CREATE GENERATOR REGIVADET_IDM_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR REGIVADET_IDM_GEN TO 4;

CREATE GENERATOR SCADPAG_IDX_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR SCADPAG_IDX_GEN TO 226;

CREATE GENERATOR TRASMERCE_IDX_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR TRASMERCE_IDX_GEN TO 0;



/******************************************************************************/
/****                          Stored procedures                           ****/
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE AGG_CONTI_MOVNOTA
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE AGGART (
    NEWANNO VARCHAR(4))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE AGGARTACQ (
    CODART VARCHAR(17),
    NEWANNO VARCHAR(4))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE AGGARTSTMEN (
    ANNO VARCHAR(4),
    AV VARCHAR(1))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE AGGARTVEN (
    CODART VARCHAR(17),
    NEWANNO VARCHAR(4))
AS
BEGIN
  EXIT;
END^



CREATE PROCEDURE AGGRIM (
    OLDANNO VARCHAR(4),
    NEWANNO VARCHAR(4))
AS
BEGIN
  EXIT;
END^



CREATE PROCEDURE BILANCIO1 (
    NATURA VARCHAR(20),
    DATA1 VARCHAR(10),
    DATA2 VARCHAR(10))
RETURNS (
    CODICE VARCHAR(20),
    MA VARCHAR(20),
    CO VARCHAR(20),
    SO VARCHAR(20),
    DESCRIZIONE VARCHAR(100),
    DARE FLOAT,
    AVERE FLOAT,
    SALDO FLOAT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE BILANCIO2 (
    NATURA VARCHAR(20),
    DATA1 VARCHAR(10),
    DATA2 VARCHAR(10),
    CAUS1 VARCHAR(10),
    CAUS2 VARCHAR(10))
RETURNS (
    CODICE VARCHAR(20),
    MA VARCHAR(20),
    CO VARCHAR(20),
    SO VARCHAR(20),
    DESCRIZIONE VARCHAR(100),
    DARE NUMERIC(16,2),
    AVERE NUMERIC(16,2),
    SALDO NUMERIC(16,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE BILANCIO3 (
    NATURA VARCHAR(20),
    DATA1 DATE,
    DATA2 DATE,
    CAUS1 VARCHAR(10),
    CAUS2 VARCHAR(10))
RETURNS (
    CODICE VARCHAR(20),
    MA VARCHAR(20),
    CO VARCHAR(20),
    SO VARCHAR(20),
    DESCRIZIONE VARCHAR(100),
    DARE NUMERIC(16,2),
    AVERE NUMERIC(16,2),
    SALDO NUMERIC(16,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE BILANCIOX (
    NATURA VARCHAR(20),
    DATA1 DATE,
    DATA2 DATE,
    CAUS1 VARCHAR(10),
    CAUS2 VARCHAR(10))
RETURNS (
    CODICE VARCHAR(20),
    MA VARCHAR(20),
    CO VARCHAR(20),
    SO VARCHAR(20),
    DESCRIZIONE VARCHAR(100),
    DARE NUMERIC(16,2),
    AVERE NUMERIC(16,2),
    SALDO NUMERIC(16,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE BILANCIOX1 (
    NATURA VARCHAR(20),
    DATA1 DATE,
    DATA2 DATE,
    CAUS1 VARCHAR(10),
    CAUS2 VARCHAR(10))
RETURNS (
    CODICE VARCHAR(20),
    MA VARCHAR(20),
    CO VARCHAR(20),
    SO VARCHAR(20),
    DESCRIZIONE VARCHAR(100),
    DARE NUMERIC(16,2),
    AVERE NUMERIC(16,2),
    SALDO NUMERIC(16,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE BILANCIOX2 (
    NATURA VARCHAR(20),
    DATA1 DATE,
    DATA2 DATE,
    CAUS1 VARCHAR(10),
    CAUS2 VARCHAR(10))
RETURNS (
    CODICE VARCHAR(20),
    MA VARCHAR(20),
    CO VARCHAR(20),
    SO VARCHAR(20),
    DESCRIZIONE VARCHAR(100),
    DARE NUMERIC(16,2),
    AVERE NUMERIC(16,2),
    SALDO NUMERIC(16,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE BILANCIOX3 (
    NATURA VARCHAR(20),
    DATA1 DATE,
    DATA2 DATE,
    CAUS1 VARCHAR(10),
    CAUS2 VARCHAR(10))
RETURNS (
    CODICE VARCHAR(20),
    MA VARCHAR(20),
    CO VARCHAR(20),
    SO VARCHAR(20),
    DESCRIZIONE VARCHAR(100),
    DARE NUMERIC(16,2),
    AVERE NUMERIC(16,2),
    SALDO NUMERIC(16,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ELIMARTDEP2 (
    ANNO VARCHAR(4))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE FTCLITOT (
    TIPO VARCHAR(20),
    IDX INTEGER)
RETURNS (
    CIVA VARCHAR(20),
    SIMP NUMERIC(18,6),
    SIVA NUMERIC(18,6),
    TOT NUMERIC(18,6))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE FTCLITOTDDT (
    TIPO VARCHAR(20),
    ID INTEGER)
RETURNS (
    IDX INTEGER,
    IDDOCPRI INTEGER,
    NUMDOC INTEGER,
    DATA DATE,
    SIMP NUMERIC(18,6),
    SIVA NUMERIC(18,6),
    TOT NUMERIC(18,6),
    CIVA VARCHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE FTFORTOT (
    TIPO VARCHAR(20),
    IDX INTEGER)
RETURNS (
    CIVA VARCHAR(20),
    SIMP NUMERIC(18,2),
    SIVA NUMERIC(18,2),
    TOT NUMERIC(18,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE FTFORTOTDDT (
    TIPO VARCHAR(20),
    ID INTEGER)
RETURNS (
    IDX INTEGER,
    IDDOCPRI INTEGER,
    NUMDOC INTEGER,
    DATA DATE,
    SIMP NUMERIC(18,2),
    SIVA NUMERIC(18,2),
    TOT NUMERIC(18,2),
    CIVA VARCHAR(20))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GETNEXTID (
    GENERATORNAME VARCHAR(30))
RETURNS (
    RECID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE RICCLIIMPART (
    ANNO VARCHAR(4))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE RIMMESEPREC (
    MESE INTEGER,
    ANNO VARCHAR(4),
    CODICE VARCHAR(17))
RETURNS (
    RIMPREC FLOAT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE TOPCLI (
    CODART VARCHAR(17),
    CLIFOR VARCHAR(22))
RETURNS (
    CODICEPDC VARCHAR(50),
    DESCRIZIONE VARCHAR(200),
    TIPO VARCHAR(20),
    NUMDOC FLOAT,
    DATA DATE,
    PREZZO FLOAT,
    PRZNETTO FLOAT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE TOPFOR (
    CODART VARCHAR(17),
    CLIFOR VARCHAR(22))
RETURNS (
    CODICEPDC VARCHAR(50),
    DESCRIZIONE VARCHAR(200),
    TIPO VARCHAR(20),
    NUMDOC FLOAT,
    DATA DATE,
    PREZZO FLOAT,
    PRZNETTO FLOAT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE VISPARAP (
    MA VARCHAR(30),
    CAUSC VARCHAR(5),
    CAUSA VARCHAR(5))
RETURNS (
    TAVERE NUMERIC(15,2),
    SALDO NUMERIC(15,2),
    TDARE NUMERIC(15,2),
    DESCR VARCHAR(100),
    NUMDOC VARCHAR(20),
    CONTO VARCHAR(30))
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/****                                Tables                                ****/
/******************************************************************************/



CREATE TABLE ARTAGE (
    IDX       INTEGER NOT NULL,
    IDCODICE  VARCHAR(17) NOT NULL,
    CODCLI    VARCHAR(22) NOT NULL,
    CODAGE    VARCHAR(22) NOT NULL,
    PROV      NUMERIC(18,5),
    PDAL      DATE,
    PAL       DATE
);

CREATE TABLE ARTCON (
    IDX     INTEGER NOT NULL,
    CODICE  VARCHAR(17),
    DESCR   VARCHAR(100),
    RIM     DOUBLE PRECISION,
    ASS     DOUBLE PRECISION,
    PRE     DOUBLE PRECISION,
    GIA     DOUBLE PRECISION,
    DATA    DATE,
    CODPDC  VARCHAR(22) NOT NULL
);

CREATE TABLE ARTFORCOD (
    IDCODICE     VARCHAR(17) NOT NULL,
    CODICEFOR    VARCHAR(22),
    DESCRIZIONE  VARCHAR(50),
    CODARTFOR    VARCHAR(30),
    PRZACQ       NUMERIC(18,5),
    PRZACQSC     NUMERIC(18,5)
);

CREATE TABLE ARTGIA (
    CODICE      VARCHAR(17) NOT NULL,
    CODDEP      INTEGER DEFAULT 0,
    GIA         FLOAT DEFAULT 0,
    QTAVEN      FLOAT DEFAULT 0,
    QTAACQ      FLOAT,
    RIM         FLOAT,
    SCORTA      FLOAT DEFAULT 0,
    ANNO        VARCHAR(4),
    CODICEFULL  VARCHAR(21) NOT NULL
);

CREATE TABLE ARTICOLI (
    CODICE                    VARCHAR(20) NOT NULL,
    DESCR                     VARCHAR(600),
    BARCODE                   VARCHAR(13),
    CODIVA                    VARCHAR(20),
    UMA                       VARCHAR(4),
    UMV                       VARCHAR(4),
    FORNITAB                  VARCHAR(10),
    CODARTFO                  VARCHAR(18),
    ARTSOST                   VARCHAR(18),
    VALUTAV                   VARCHAR(20),
    CRICAVI                   VARCHAR(20),
    CCOSTI                    VARCHAR(20),
    CATMERC                   VARCHAR(15),
    TIPOART                   VARCHAR(30),
    KG                        NUMERIC(5,5),
    PREZZO1                   NUMERIC(18,5),
    PREZZO2                   NUMERIC(18,5),
    PREZZO3                   NUMERIC(18,5),
    PREZACQ                   NUMERIC(18,5),
    QCART                     NUMERIC(18,5),
    PROV                      NUMERIC(18,5),
    PEZZI                     NUMERIC(18,5),
    VOL                       NUMERIC(18,5),
    COLLI                     NUMERIC(18,5),
    PROVTIPO                  VARCHAR(50),
    PRZVCIVA                  DM_BOOLEAN,
    PRZACIVA                  DM_BOOLEAN,
    TIPOARTVC                 VARCHAR(50),
    IMAGE                     BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    RIGHE                     VARCHAR(600),
    QUALVER                   VARCHAR(600),
    QUALCON                   VARCHAR(600),
    CONDAEFF                  VARCHAR(600),
    UBICAZIONE                VARCHAR(200),
    RIC_LIST_VEND_DA_PRZ_ACQ  DM_BOOLEAN,
    PERCRICART_V_L1           NUMERIC(18,5) DEFAULT 0.0,
    PERCRICART_V_L2           NUMERIC(18,5) DEFAULT 0.0,
    PERCRICART_V_L3           NUMERIC(18,5) DEFAULT 0.0,
    CODARTALTERNATIVO         VARCHAR(100),
    URLIMAGE                  VARCHAR(200),
    PREZACQNETTO              NUMERIC(18,5) DEFAULT 0.0,
    NOTE                      VARCHAR(600)
);

CREATE TABLE ARTLISTCLI (
    IDX     INTEGER NOT NULL,
    CODICE  VARCHAR(17),
    DESCR   VARCHAR(100),
    PRZ     NUMERIC(18,4),
    CODPDC  VARCHAR(22) NOT NULL
);

CREATE TABLE ARTMOVCS (
    IDCODICE     VARCHAR(17) NOT NULL,
    CODICE       VARCHAR(17),
    DESCRIZIONE  VARCHAR(100),
    FS           VARCHAR(100),
    FC           VARCHAR(100)
);

CREATE TABLE ARTPRZSP (
    IDX       INTEGER NOT NULL,
    IDCODICE  VARCHAR(17) NOT NULL,
    PRZVEN    NUMERIC(18,5),
    PRZDAL    DATE,
    PRZAL     DATE,
    LISTINO   INTEGER DEFAULT 1
);

CREATE TABLE ARTPRZVAR (
    IDX       INTEGER NOT NULL,
    IDCODICE  VARCHAR(17),
    PREZZO    NUMERIC(18,5),
    LISTINO   SMALLINT DEFAULT 1,
    DATA      DATE
);

CREATE TABLE ARTSTAT (
    CODICE      VARCHAR(17),
    ANNO        VARCHAR(4),
    QTAVEN      FLOAT,
    IMPVEN      FLOAT,
    ULTPREZVEN  FLOAT,
    QTAACQ      FLOAT,
    IMPACQ      FLOAT,
    ULTPREZACQ  FLOAT,
    MESE        INTEGER,
    ULTDATAVEN  DATE,
    ULTDATAACQ  DATE
);

CREATE TABLE AUTOMEZZI (
    CODICE  VARCHAR(50) CHARACTER SET WIN1251 NOT NULL,
    DESCR   VARCHAR(200) CHARACTER SET WIN1251
);

CREATE TABLE CATMERC (
    CODICE  VARCHAR(15),
    DESCR   VARCHAR(50),
    PRIC1   NUMERIC(10,4),
    PRIC12  NUMERIC(10,4),
    PRIC13  NUMERIC(10,4),
    PRIC2   NUMERIC(10,4),
    PRIC22  NUMERIC(10,4),
    PRIC23  NUMERIC(10,4),
    PRIC3   NUMERIC(10,4),
    PRIC32  NUMERIC(10,4),
    PRIC33  NUMERIC(10,4)
);

CREATE TABLE CAUSALI (
    CODICE       VARCHAR(5) NOT NULL,
    DESCRIZIONE  VARCHAR(50),
    TIPO         VARCHAR(50),
    REG          VARCHAR(50)
);

CREATE TABLE CAUSDETT (
    CODICE    VARCHAR(5) NOT NULL,
    DESCR     VARCHAR(50),
    TIPO      VARCHAR(30),
    DA        VARCHAR(20),
    CODICEPDC  VARCHAR(50),
    IDM       INTEGER NOT NULL
);

CREATE TABLE CAUSTMERCE (
    CODICE   VARCHAR(5) NOT NULL,
    DESCR    VARCHAR(100),
    CODART   VARCHAR(17),
    DART     VARCHAR(100),
    CART1    VARCHAR(17),
    DART1    VARCHAR(100),
    PTRASF1  NUMERIC(18,2),
    CART2    VARCHAR(17),
    DART2    VARCHAR(100),
    PTRASF2  NUMERIC(18,2),
    CART3    VARCHAR(17),
    DART3    VARCHAR(100),
    PTRASF3  NUMERIC(18,2),
    CART4    VARCHAR(17),
    DART4    VARCHAR(100),
    PTRASF4  NUMERIC(18,2)
);

CREATE TABLE CCOSTO (
    CODICE       VARCHAR(20),
    DESCRIZIONE  VARCHAR(200),
    CRADICE      VARCHAR(20)
);

CREATE TABLE CESPITI (
    IDX          INTEGER NOT NULL,
    CODICE       VARCHAR(10),
    DESCRIZIONE  VARCHAR(50),
    CATEGORIA    VARCHAR(2),
    ACQDATA      DATE,
    ACQNUMDOC    VARCHAR(10),
    ACQIMP       DOUBLE PRECISION,
    ACQIVA       DOUBLE PRECISION,
    ACQTOTALE    DOUBLE PRECISION
);

CREATE TABLE CESPITIAMM (
    IDM  INTEGER NOT NULL,
    IDX  INTEGER
);

CREATE TABLE CLIDOC (
    IDX                         INTEGER NOT NULL,
    CODICEPDC                   VARCHAR(50),
    NUMDOC                      FLOAT DEFAULT 0,
    REGIVA                      INTEGER DEFAULT 0,
    TIPO                        VARCHAR(50),
    LISTINO                     FLOAT DEFAULT 0,
    CODDEST                     VARCHAR(15),
    DESTMERCE                   VARCHAR(50),
    SCONTO1                     FLOAT DEFAULT 0,
    SCONTO2                     FLOAT DEFAULT 0,
    SCONTO3                     FLOAT DEFAULT 0,
    GENMOV                      DM_BOOLEAN,
    GENDOC                      DM_BOOLEAN,
    IDDOCPRI                    INTEGER DEFAULT 0,
    TRA                         VARCHAR(20) DEFAULT 0,
    CODPAG                      VARCHAR(15),
    DESLIB                      VARCHAR(800),
    CODAUTO                     VARCHAR(50),
    VETTORE                     VARCHAR(15),
    TMP                         VARCHAR(15),
    DATA                        DATE,
    CODAGE                      VARCHAR(15),
    PREV                        DM_BOOLEAN,
    TOTDOC                      NUMERIC(18,2),
    IMPONIBILE                  NUMERIC(18,2),
    IVA                         NUMERIC(18,2),
    CCOSTO                      VARCHAR(20),
    ECR_PRINT                   DM_BOOLEAN,
    INCDOC                      DM_BOOLEAN,
    SEGUEDDT                    DM_BOOLEAN,
    GENSCAD                     DM_BOOLEAN,
    TINC                        NUMERIC(18,2),
    IDPNOTA                     BIGINT,
    FTPAPROG                    BIGINT,
    FTPACODDEST                 VARCHAR(10),
    DATASCADPAG                 DATE,
    CODICECIG                   VARCHAR(15),
    CODICECUP                   VARCHAR(15),
    DC_IDDOCUMENTO              VARCHAR(20),
    DC_DATA                     DATE,
    DC_CODICECIG                VARCHAR(15),
    DC_CODICECUP                VARCHAR(15),
    FTPADALLEGATO               VARCHAR(100),
    FTPAFALLEGATO               VARCHAR(600),
    DGD_ART73                   VARCHAR(20),
    FTPABOLLOSINO               VARCHAR(15),
    FTPABOLLOIMP                NUMERIC(18,5),
    RITACCONTO                  VARCHAR(200),
    ALIQRITACCONTO              NUMERIC(18,2),
    IMPRITACCONTO               NUMERIC(18,2),
    FTPAFALLEGATOTIPO           VARCHAR(20),
    FTPAGIORNITERMINIPAGAMENTO  INTEGER DEFAULT 0
);

CREATE TABLE CLIDOCDET (
    IDX                   INTEGER NOT NULL,
    IDM                   INTEGER NOT NULL,
    CODICE                VARCHAR(17),
    DESCRIZIONE           VARCHAR(2000),
    DESCR2                VARCHAR(900),
    UM                    VARCHAR(100),
    QTA                   DOUBLE PRECISION DEFAULT 0,
    PEZZI                 FLOAT DEFAULT 0,
    PREZZO                DOUBLE PRECISION DEFAULT 0,
    SCC                   VARCHAR(50),
    COLLI                 FLOAT DEFAULT 0,
    TIPODOC               VARCHAR(10),
    NUMDOC                FLOAT DEFAULT 0,
    FE                    CHAR(1),
    CALCE                 DM_BOOLEAN,
    KG                    FLOAT,
    DENS                  FLOAT,
    IDXORD                FLOAT,
    CODIVA                VARCHAR(20),
    FORM1                 VARCHAR(60),
    FORM2                 VARCHAR(60),
    FORM3                 VARCHAR(60),
    IMP                   NUMERIC(18,5),
    SC1                   NUMERIC(18,2),
    SC2                   NUMERIC(18,2),
    SC3                   NUMERIC(18,2),
    PROV                  NUMERIC(10,4),
    PROVS                 NUMERIC(10,4),
    PEZZIS                NUMERIC(10,4),
    IDLOTTO               INTEGER,
    TOT                   NUMERIC(18,2),
    CODAGE                VARCHAR(22),
    IVA                   NUMERIC(18,6),
    IVAMAN                DM_BOOLEAN,
    DL_TIPODATO           VARCHAR(10),
    DL_RIFERIMENTOTESTO   VARCHAR(60),
    DL_RIFERIMENTONUMERO  NUMERIC(18,2),
    DL_RIFERIMENTODATA    DATE,
    FATTOREGIA            NUMERIC(18,5) DEFAULT 1
);

CREATE TABLE CLIFOR (
    CODICE       VARCHAR(20) NOT NULL,
    IDX          INTEGER  NOT NULL,
    TIPO         VARCHAR(10),
    DESCRIZIONE  DM_STR100,
    CZONE        VARCHAR(5),
    CEL          VARCHAR(50),
    CODIVA       VARCHAR(50),
    PIVA         VARCHAR(50),
    CF           VARCHAR(20),
    NOME         VARCHAR(50),
    CODPDC       VARCHAR(22) NOT NULL,
    LISTINOA     INTEGER DEFAULT 0,
    CODB1        VARCHAR(50),
    CODB2        VARCHAR(50),
    COGNOME      VARCHAR(50),
    DEST         VARCHAR(50),
    ATEL         VARCHAR(50),
    AFAX         VARCHAR(50),
    AEMAIL       VARCHAR(50),
    AIND         VARCHAR(50),
    ACITTA       VARCHAR(50),
    ACAP         VARCHAR(10),
    APV          VARCHAR(4),
    NOTE         VARCHAR(600),
    CODPAG       VARCHAR(15),
    CODCAUS      VARCHAR(5),
    SCA1         NUMERIC(10,4),
    SCA2         NUMERIC(10,4),
    SCA3         NUMERIC(10,4),
    CODAGE       VARCHAR(22),
    PROVAGE      NUMERIC(18,5),
    LISTINOB     INTEGER,
    SCB1         NUMERIC(10,4),
    SCB2         NUMERIC(10,4),
    SCB3         NUMERIC(10,4),
    LISTINOC     INTEGER,
    SCC1         NUMERIC(10,4),
    SCC2         NUMERIC(10,4),
    SCC3         NUMERIC(10,4),
    SCA          DM_BOOLEAN,
    SCB          DM_BOOLEAN,
    SCC          DM_BOOLEAN,
    FTAMMPUB     DM_BOOLEAN,
    FTPACODDEST  VARCHAR(10),
    SIND         VARCHAR(100),
    SCITTA       VARCHAR(100),
    SCAP         VARCHAR(100),
    SPV          VARCHAR(2),
    STEL         VARCHAR(50),
    SFAX         VARCHAR(50),
    SEMAIL       VARCHAR(50),
    FTPRIVATO    DM_BOOLEAN,
    FTTRASMSPEC  DM_BOOLEAN,
    FTPEC        VARCHAR(100),
    CODDEST      VARCHAR(30),
    CODEORI      VARCHAR(17),
    STATOIDIVA   VARCHAR(2),
    STATORES     VARCHAR(2),
    IBAN         VARCHAR(30),
    RAGSOCIBAN   VARCHAR(200),
    IBANBIC      VARCHAR(50),
    IBANABI      VARCHAR(50),
    IBANCAB      VARCHAR(50)
);

CREATE TABLE CLIFORSLEG (
    IDX      BIGINT NOT NULL,
    CODPDC   VARCHAR(22),
    SIND     VARCHAR(50),
    SCITTA   VARCHAR(50),
    SPV      VARCHAR(50),
    SCAP     VARCHAR(50),
    STEL     VARCHAR(50),
    SFAX     VARCHAR(50),
    SEMAIL   VARCHAR(50),
    DATADAL  DATE,
    DATAAL   DATE
);

CREATE TABLE CLISCOCAT (
    IDX     BIGINT NOT NULL,
    CODICE  VARCHAR(15),
    DESCR   VARCHAR(50),
    CODPDC  VARCHAR(22),
    SC1     NUMERIC(10,4),
    SC2     NUMERIC(10,4),
    SC3     NUMERIC(10,4)
);

CREATE TABLE CODIVA (
    CODIVA                VARCHAR(20) NOT NULL,
    DESCR                 VARCHAR(100),
    TIPO                  VARCHAR(15),
    ALI                   FLOAT,
    IND                   FLOAT,
    IMPIND                FLOAT DEFAULT 0,
    IVAIND                FLOAT DEFAULT 0,
    ESIGIBILITAIVA        VARCHAR(30),
    RIFERIMENTONORMATIVO  VARCHAR(100),
    NATURA                VARCHAR(200)
);

CREATE TABLE CONTRATTI (
    CODICE_CO    VARCHAR(15) NOT NULL,
    DESCRIZIONE  VARCHAR(100),
    COMMITTENTE  VARCHAR(100),
    DATA_INIZIO  DATE,
    DATA_FINE    DATE
);

CREATE TABLE DEPOSITI (
    CODICE       INTEGER NOT NULL,
    DESCRIZIONE  VARCHAR(50)
);

CREATE TABLE DEST (
    CODICE       VARCHAR(15) NOT NULL,
    CONTR        VARCHAR(15),
    VC           VARCHAR(50),
    DESCRIZIONE  VARCHAR(50)
);

CREATE TABLE DESTMERCE (
    CODDEST    VARCHAR(30),
    RAGSOC     VARCHAR(200),
    INDIRIZZO  VARCHAR(200),
    NCIV       VARCHAR(10),
    CAP        VARCHAR(6),
    CITTA      VARCHAR(30),
    PV         VARCHAR(2),
    PIVA       VARCHAR(20),
    NAZ        VARCHAR(4)
);

CREATE TABLE DIPENDENTI (
    CODICE_DI    VARCHAR(15) NOT NULL,
    DESCRIZIONE  VARCHAR(100)
);

CREATE TABLE FORDOC (
    IDX         INTEGER NOT NULL,
    CODICEPDC     VARCHAR(50),
    NUMDOC      FLOAT,
    REGIVA      INTEGER,
    TIPO        VARCHAR(50),
    LISTINO     FLOAT,
    CODDEST     VARCHAR(15),
    DESTMERCE   VARCHAR(200),
    SCONTO1     FLOAT,
    SCONTO2     FLOAT,
    SCONTO3     FLOAT,
    GENMOV      DM_BOOLEAN,
    GENDOC      DM_BOOLEAN,
    IDDOCPRI    INTEGER,
    TRA         VARCHAR(20),
    CODPAG      VARCHAR(15),
    DESLIB      VARCHAR(800),
    CODAUTO     VARCHAR(50),
    VETTORE     VARCHAR(15),
    TMP         VARCHAR(15),
    DATA        DATE,
    CODAGE      VARCHAR(15),
    PREV        DM_BOOLEAN,
    NDOCFOR     VARCHAR(20),
    IVA         NUMERIC(18,2),
    IMPONIBILE  NUMERIC(18,2),
    TOTDOC      NUMERIC(18,2),
    CCOSTO      VARCHAR(20),
    PAGDOC      DM_BOOLEAN,
    GENSCAD     DM_BOOLEAN,
    TPAG        NUMERIC(18,2),
    DATAREG     DATE,
    IDPNOTA     BIGINT
);

CREATE TABLE FORDOCDET (
    IDX              INTEGER NOT NULL,
    IDM              INTEGER NOT NULL,
    CODICE           VARCHAR(17),
    DESCRIZIONE      VARCHAR(900),
    DESCR2           VARCHAR(900),
    UM               VARCHAR(100),
    QTA              DOUBLE PRECISION,
    PEZZI            FLOAT,
    PREZZO           DOUBLE PRECISION,
    SCC              VARCHAR(50),
    PROV             FLOAT,
    COLLI            FLOAT,
    TIPODOC          VARCHAR(10),
    NUMDOC           FLOAT,
    FE               CHAR(1),
    CALCE            DM_BOOLEAN,
    KG               FLOAT,
    DENS             FLOAT,
    IDXORD           FLOAT,
    CODIVA           VARCHAR(20),
    FORM1            VARCHAR(60),
    FORM2            VARCHAR(60),
    FORM3            VARCHAR(60),
    SC1              NUMERIC(18,2),
    SC2              NUMERIC(18,2),
    SC3              NUMERIC(18,2),
    IMP              NUMERIC(18,5) DEFAULT 0.0,
    CODFOR           VARCHAR(30),
    IDLOTTO          INTEGER,
    TOT              NUMERIC(18,2),
    PRZVEN           NUMERIC(18,5),
    CODARTFOR        VARCHAR(17),
    IVAMAN           DM_BOOLEAN,
    IVA              NUMERIC(18,4),
    PERCRICART_V_L1  NUMERIC(18,5) DEFAULT 0.0,
    PERCRICART_V_L2  NUMERIC(18,5) DEFAULT 0.0,
    PERCRICART_V_L3  NUMERIC(18,5) DEFAULT 0.0,
    PRZVEN2          NUMERIC(18,5),
    PRZVEN3          NUMERIC(18,5),
    FATTOREGIA       NUMERIC(18,5) DEFAULT 1
);

CREATE TABLE GENERALI (
    CO_CASSA                     VARCHAR(22),
    CO_CLIENTI                   VARCHAR(22),
    CO_FORNITORI                 VARCHAR(22),
    CO_CORRISPETTIVI             VARCHAR(22),
    CO_IVAACQ                    VARCHAR(22),
    CO_IVAVEN                    VARCHAR(22),
    CO_IVAIND                    VARCHAR(22),
    CO_COSTIND                   VARCHAR(22),
    CO_GIRIVA                    VARCHAR(22),
    CA_CHIIVA                    VARCHAR(22),
    CA_FAVE                      VARCHAR(22),
    CA_NCVE                      VARCHAR(22),
    CA_INCFAVE                   VARCHAR(22),
    CA_INCFTVEASS                VARCHAR(22),
    CA_PAGNCVE                   VARCHAR(22),
    CA_FAACQ                     VARCHAR(22),
    CA_NCACQ                     VARCHAR(22),
    CA_PAGFAACQ                  VARCHAR(22),
    CA_PAGFTACQASS               VARCHAR(22),
    CA_INCNCACQ                  VARCHAR(22),
    CO_ARTRIC                    VARCHAR(22),
    CO_ARTCOS                    VARCHAR(22),
    PREZZOARTVENCONIVA           DM_BOOLEAN,
    ARTUMVEN                     VARCHAR(22),
    ARTUMACQ                     VARCHAR(22),
    ARTALIQIVAVEN                VARCHAR(22),
    CO_PROFPERDITE               VARCHAR(22),
    CO_UTILEES                   VARCHAR(22),
    CO_PERDITAES                 VARCHAR(22),
    CO_BILANCIOCHI               VARCHAR(22),
    CO_BILANCIOAPE               VARCHAR(22),
    CA_CHIUSURACONTI             VARCHAR(22),
    CA_APERTURACONTI             VARCHAR(22),
    CHIUAUTOMPARTITEAP           VARCHAR(22),
    CODICELIBROMASTRO            VARCHAR(22),
    RPART                        VARCHAR(100),
    RPLISTAARTPRZL1              VARCHAR(100),
    RPLISTAARTPRZL2              VARCHAR(100),
    RPLISTAARTPRZL3              VARCHAR(100),
    RPLISTAARTPRZAC              VARCHAR(100),
    RPLISTAARTPRZLT              VARCHAR(100),
    ECRLISTVEN                   VARCHAR(100),
    RPCLI                        VARCHAR(100),
    RPFOR                        VARCHAR(100),
    RPCAUS                       VARCHAR(100),
    RPCAUSTM                     VARCHAR(100),
    RPCATMERC                    VARCHAR(100),
    RPLISTAUTO                   VARCHAR(100),
    RPLISTAZI                    VARCHAR(100),
    RPLISTREGIVA                 VARCHAR(100),
    RPLISTCOMUNI                 VARCHAR(100),
    RPLISTZONE                   VARCHAR(100),
    RPPDC                        VARCHAR(100),
    RPCIVA                       VARCHAR(100),
    RPLISTRIVA                   VARCHAR(100),
    RPTMPREG                     VARCHAR(100),
    RPLOTTI                      VARCHAR(100),
    RPSCADENZ                    VARCHAR(100),
    RPPNOTA                      VARCHAR(100),
    RPSCHEDA                     VARCHAR(100),
    RPREGIVA                     VARCHAR(100),
    RPMASTRO                     VARCHAR(100),
    RPLIQIVA                     VARCHAR(100),
    RPMOVANNOCLIFOR              VARCHAR(100),
    RPMOVANNOCLIFORMASTR         VARCHAR(100),
    RPBILANCIO                   VARCHAR(100),
    RPMASTRINISC                 VARCHAR(100),
    RPVISPAAPSIN                 VARCHAR(100),
    RPVISPAAPCS                  VARCHAR(100),
    RPVISPAAPCT                  VARCHAR(100),
    RPVISPAAPCTT                 VARCHAR(100),
    RPVISPAAPCTZ                 VARCHAR(100),
    RPCLIFA                      VARCHAR(100),
    RPCLIDDT                     VARCHAR(100),
    RPCLIFD                      VARCHAR(100),
    RPCLIORD                     VARCHAR(100),
    RPCLIPRE                     VARCHAR(100),
    RPCLINC                      VARCHAR(100),
    RPCLIDDTDAFT                 VARCHAR(100),
    RPCLIDOCARTPROV              VARCHAR(100),
    RPCLIDOCARTVEND              VARCHAR(100),
    RPCLIDOCBUSCITA              VARCHAR(100),
    RPCLIFABU                    VARCHAR(100),
    RPCLIDOCBORD                 VARCHAR(100),
    RPCLIDOCRBORD                VARCHAR(100),
    RPCLIDOCESCONTO              VARCHAR(100),
    RPCLIDOCRMENSILE             VARCHAR(100),
    RPCLIDOCDXLOTTI              VARCHAR(100),
    RPCLILISTDOC                 VARCHAR(100),
    RPCLIDOCTOTFAT               VARCHAR(100),
    RPFORFA                      VARCHAR(100),
    RPFORDDT                     VARCHAR(100),
    RPFORFD                      VARCHAR(100),
    RPFORORD                     VARCHAR(100),
    RPFORPRE                     VARCHAR(100),
    RPFORNC                      VARCHAR(100),
    RPFORDOCARTACQ               VARCHAR(100),
    RPFORDOCBUSCITA              VARCHAR(100),
    RPFORAFA                     VARCHAR(100),
    CO_ASSEGNI                   VARCHAR(22),
    PROG_SERV_MASTRO             DM_BOOLEAN,
    PROG_SERV_CLIDOC_FA          DM_BOOLEAN,
    PROG_SERV_ARTICOLI           DM_BOOLEAN,
    CO_BANCA                     VARCHAR(22),
    CO_CARTE                     VARCHAR(22),
    NUMAUTOFTELETTRONICA         DM_BOOLEAN,
    ALLEGACOPIAFTELETTRONICA     DM_BOOLEAN,
    CHIEDIALLCOPIAFTELETTRONICA  DM_BOOLEAN,
    SCARMANGIAVEN                DM_BOOLEAN,
    SCARMANGIAACQ                DM_BOOLEAN,
    ID                           INTEGER,
    AUTONUMCODART                DM_BOOLEAN,
    AUTONUMCODCLI                DM_BOOLEAN,
    AUTONUMCODFOR                DM_BOOLEAN
);

CREATE TABLE GRBORDERO (
    CODGRBR    VARCHAR(20),
    RAGSOC     VARCHAR(100),
    INDIRIZZO  VARCHAR(100),
    CAP        VARCHAR(6),
    CITTA      VARCHAR(30),
    PV         VARCHAR(2),
    PIVA       VARCHAR(20)
);

CREATE TABLE IMPIANTO (
    IDX       INTEGER NOT NULL,
    CODPDC    VARCHAR(22),
    UIND      VARCHAR(50),
    UPALAZZO  VARCHAR(10),
    USCALA    VARCHAR(10),
    UPIANO    VARCHAR(10),
    UINTERNO  VARCHAR(10),
    UCAP      VARCHAR(10),
    ULOC      VARCHAR(10),
    UCITTA    VARCHAR(10),
    UPV       VARCHAR(10)
);

CREATE TABLE INFODB (
    IDX         INTEGER NOT NULL,
    IDP         INTEGER,
     VERSIONE     NUMERIC(8,2),
    DESCRIZIONE  VARCHAR(20)
);

CREATE TABLE LAVORI (
    IDX          INTEGER NOT NULL,
    CODICE_LA    VARCHAR(15),
    CODICE_CO    VARCHAR(15),
    DESCRIZIONE  VARCHAR(100),
    DATA_INIZIO  DATE,
    DATA_FINE    DATE
);

CREATE TABLE LIQIVA (
    IDX       INTEGER NOT NULL,
    PERIODO   VARCHAR(4),
    ANNO      VARCHAR(4),
    CREPRE    DOUBLE PRECISION,
    DEBPRE    DOUBLE PRECISION,
    IVAACQ    DOUBLE PRECISION,
    IVAVEN    DOUBLE PRECISION,
    IVASALDO  DOUBLE PRECISION,
    ELAB      DM_BOOLEAN,
    IMPVER    DOUBLE PRECISION,
    VERIMP    NUMERIC(16,2),
    VERDATA   DATE,
    VERBANCA  VARCHAR(100)
);

CREATE TABLE LIVELLI (
    CODICE       INTEGER,
    DESCRIZIONE  VARCHAR(100),
    CONTGEN      DM_BOOLEAN,
    FATGEN       DM_BOOLEAN,
    PROGEN       DM_BOOLEAN,
    FATVEN       DM_BOOLEAN,
    FATACQ       DM_BOOLEAN,
    PRZARTACQ    DM_BOOLEAN,
    PRZARTVEN    DM_BOOLEAN
);

CREATE TABLE LOTTO (
    IDX                INTEGER NOT NULL,
    CODICE             VARCHAR(50),
    CODICEART          VARCHAR(17),
    QTAACQ             NUMERIC(18,2),
    QTAVEN             NUMERIC(18,2),
    DATAARRIVO         DATE,
    DATASCADENZA       DATE,
    DATADISTRIBUZIONE  DATE,
    DATAESAURIMENTO    DATE,
    QTARIM             NUMERIC(18,2),
    IDLOTTO            INTEGER
);

CREATE TABLE LOTTODET (
    IDX        INTEGER NOT NULL,
    IDM        INTEGER NOT NULL,
    CODICE     VARCHAR(50),
    CODICEART  VARCHAR(17),
    QTA        NUMERIC(18,2)
);

CREATE TABLE MOVFAT (
    IDX         INTEGER NOT NULL,
    NUMREG      INTEGER DEFAULT 0,
    NUMDOC      VARCHAR(50),
    CLIFOR      VARCHAR(50),
    REGIVA      INTEGER DEFAULT 0,
    DESCR       VARCHAR(100),
    DESCR2      VARCHAR(50),
    VALUTA      VARCHAR(10),
    INDIMP      DOUBLE PRECISION DEFAULT 0,
    INDIVA      DOUBLE PRECISION DEFAULT 0,
    CODIVA      VARCHAR(20) NOT NULL,
    IDM         INTEGER NOT NULL,
    DATADOC     DATE,
    DATA        DATE,
    ALIVA       NUMERIC(5,2),
    IMPONIBILE  NUMERIC(18,2),
    IVA         NUMERIC(18,2)
);

CREATE TABLE MOVNOTA (
    IDX       INTEGER NOT NULL,
    NUMPROG   INTEGER DEFAULT 0,
    CONTO     VARCHAR(22),
    DESCR     VARCHAR(150),
    VALUTA    VARCHAR(10),
    DA        VARCHAR(50),
    NUMDOC    VARCHAR(50),
    ANNO      VARCHAR(50),
    MASTROSP  CHAR(1) NOT NULL,
    IDM       INTEGER NOT NULL,
    PCHIUSA   VARCHAR(1),
    DATADOC   DATE,
    DATA      DATE,
    IMPORTO   NUMERIC(18,2),
    DARE      NUMERIC(18,2),
    AVERE     NUMERIC(18,2),
    CODICEMA  VARCHAR(2),
    CODICECO  VARCHAR(20),
    CODICESO  VARCHAR(20),
    CAUS      VARCHAR(5),
    DESCROP   VARCHAR(100)
);

CREATE TABLE PAGAMENTI (
    CODICE      VARCHAR(15) NOT NULL,
    DESCR       VARCHAR(200),
    NUMRATE     INTEGER,
    INIZIORATA  INTEGER,
    FINEMESE    DM_BOOLEAN,
    TIPO        VARCHAR(20),
    CON         VARCHAR(20),
    IBAN        VARCHAR(30),
    MODO        VARCHAR(30),
    ABI         VARCHAR(10),
    CAB         VARCHAR(10),
    BIC         VARCHAR(15)
);

CREATE TABLE PDC (
    CODICEMA     VARCHAR(2),
    CODICECO     VARCHAR(20),
    CODICESO     VARCHAR(20),
    CODICEPDC     VARCHAR(50) NOT NULL,
    TIPO         VARCHAR(20),
    DESCRIZIONE  DM_STR100,
    NATURA       VARCHAR(20),
    TIPOMA       VARCHAR(20),
    IMPDARE      FLOAT DEFAULT 0,
    IMPAVERE     FLOAT DEFAULT 0,
    CODICECLI    VARCHAR(20),
    CODICEFOR    VARCHAR(20),
    PAR          VARCHAR(22)
);

CREATE TABLE PDCRI (
    CODICE       VARCHAR(30) NOT NULL,
    DESCRIZIONE  VARCHAR(500),
    CODPDC       VARCHAR(30)
);

CREATE TABLE PLANASS (
    IDX        INTEGER,
    STARTTIME  TIMESTAMP,
    ENDTIME    TIMESTAMP,
    NOTES      BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    GUASTO     VARCHAR(50) CHARACTER SET WIN1251,
    COLOR      DOUBLE PRECISION,
    IMAGE      DOUBLE PRECISION,
    CAPTION    VARCHAR(1) CHARACTER SET WIN1251,
    ASSISTITO  VARCHAR(50) CHARACTER SET WIN1251,
    DATAINT    DATE,
    ORAIN      TIME,
    ORAFIN     TIME,
    DATA       DATE,
    CODLOC     VARCHAR(12),
    CODTEC     VARCHAR(3),
    ESEGUITO   DM_BOOLEAN
);

CREATE TABLE PLANDB (
    PLANNERKEY  VARCHAR(40),
    STARTTIME   TIMESTAMP,
    ENDTIME     TIMESTAMP,
    NOTES       BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    SUBJECT     VARCHAR(50),
    COLOR       DOUBLE PRECISION,
    IMAGE       DOUBLE PRECISION,
    CAPTION     VARCHAR(1)
);

CREATE TABLE PMCONTACTS (
    RECORDID      INTEGER NOT NULL,
    RESOURCEID    INTEGER NOT NULL,
    FIRSTNAME     VARCHAR(50),
    LASTNAME      VARCHAR(50),
    BIRTHDATE     DATE,
    ANNIVERSARY   DATE,
    TITLE         VARCHAR(50),
    COMPANY       VARCHAR(50),
    JOB_POSITION  VARCHAR(30),
    ADDRESS       VARCHAR(100),
    CITY          VARCHAR(50),
    STATE         VARCHAR(25),
    ZIP           VARCHAR(10),
    COUNTRY       VARCHAR(25),
    NOTE          VARCHAR(1024),
    PHONE1        VARCHAR(25),
    PHONE2        VARCHAR(25),
    PHONE3        VARCHAR(25),
    PHONE4        VARCHAR(25),
    PHONE5        VARCHAR(25),
    PHONETYPE1    INTEGER,
    PHONETYPE2    INTEGER,
    PHONETYPE3    INTEGER,
    PHONETYPE4    INTEGER,
    PHONETYPE5    INTEGER,
    CATEGORY      INTEGER,
    EMAIL         VARCHAR(100),
    CUSTOM1       VARCHAR(100),
    CUSTOM2       VARCHAR(100),
    CUSTOM3       VARCHAR(100),
    CUSTOM4       VARCHAR(100),
    USERFIELD0    VARCHAR(100),
    USERFIELD1    VARCHAR(100),
    USERFIELD2    VARCHAR(100),
    USERFIELD3    VARCHAR(100),
    USERFIELD4    VARCHAR(100),
    USERFIELD5    VARCHAR(100),
    USERFIELD6    VARCHAR(100),
    USERFIELD7    VARCHAR(100),
    USERFIELD8    VARCHAR(100),
    USERFIELD9    VARCHAR(100)
);

CREATE TABLE PMEVENTS (
    RECORDID          INTEGER NOT NULL,
    STARTTIME         TIMESTAMP NOT NULL,
    ENDTIME           TIMESTAMP NOT NULL,
    RESOURCEID        INTEGER NOT NULL,
    DESCRIPTION       VARCHAR(255),
    NOTES             VARCHAR(1024),
    CATEGORY          INTEGER,
    ALLDAYEVENT       INTEGER,
    DINGPATH          VARCHAR(255),
    ALARMSET          INTEGER,
    ALARMADVANCE      INTEGER,
    ALARMADVANCETYPE  INTEGER,
    SNOOZETIME        TIMESTAMP,
    REPEATCODE        INTEGER,
    REPEATRANGEEND    TIMESTAMP,
    CUSTOMINTERVAL    INTEGER,
    USERFIELD0        VARCHAR(100),
    USERFIELD1        VARCHAR(100),
    USERFIELD2        VARCHAR(100),
    USERFIELD3        VARCHAR(100),
    USERFIELD4        VARCHAR(100),
    USERFIELD5        VARCHAR(100),
    USERFIELD6        VARCHAR(100),
    USERFIELD7        VARCHAR(100),
    USERFIELD8        VARCHAR(100),
    USERFIELD9        VARCHAR(100)
);

CREATE TABLE PMRESOURCES (
    RESOURCEID      INTEGER NOT NULL,
    DESCRIPTION     VARCHAR(255),
    NOTES           VARCHAR(1024),
    IMAGEINDEX      INTEGER,
    RESOURCEACTIVE  INTEGER,
    USERFIELD0      VARCHAR(100),
    USERFIELD1      VARCHAR(100),
    USERFIELD2      VARCHAR(100),
    USERFIELD3      VARCHAR(100),
    USERFIELD4      VARCHAR(100),
    USERFIELD5      VARCHAR(100),
    USERFIELD6      VARCHAR(100),
    USERFIELD7      VARCHAR(100),
    USERFIELD8      VARCHAR(100),
    USERFIELD9      VARCHAR(100)
);

CREATE TABLE PMTASKS (
    RECORDID     INTEGER NOT NULL,
    RESOURCEID   INTEGER NOT NULL,
    COMPLETE     INTEGER,
    DESCRIPTION  VARCHAR(255),
    DETAILS      VARCHAR(1024),
    CREATEDON    TIMESTAMP,
    PRIORITY     INTEGER,
    CATEGORY     INTEGER,
    COMPLETEDON  TIMESTAMP,
    DUEDATE      TIMESTAMP,
    USERFIELD0   VARCHAR(100),
    USERFIELD1   VARCHAR(100),
    USERFIELD2   VARCHAR(100),
    USERFIELD3   VARCHAR(100),
    USERFIELD4   VARCHAR(100),
    USERFIELD5   VARCHAR(100),
    USERFIELD6   VARCHAR(100),
    USERFIELD7   VARCHAR(100),
    USERFIELD8   VARCHAR(100),
    USERFIELD9   VARCHAR(100)
);

CREATE TABLE PNOTA (
    IDX         INTEGER NOT NULL,
    NUMPROG     INTEGER DEFAULT 0,
    CAUS        VARCHAR(5) NOT NULL,
    REGIVA      INTEGER DEFAULT 0,
    NUMREG      INTEGER DEFAULT 0,
    NUMDOC      VARCHAR(50),
    CLIFOR      VARCHAR(50),
    DESCR       VARCHAR(200),
    DESCR2      VARCHAR(50),
    TOTALE      DOUBLE PRECISION DEFAULT 0,
    ANNO        VARCHAR(5),
    CHIUSO      CHAR(1),
    VALUTA      VARCHAR(20),
    DATAMOV     DATE,
    DATADOC     DATE,
    CODPAG      VARCHAR(15),
    SCADPAGGEN  DM_BOOLEAN
);

CREATE TABLE RAPPGEN (
    IDX          INTEGER NOT NULL,
    IDXCOLA      INTEGER NOT NULL,
    CODICE_CO    VARCHAR(15),
    CODICE_LA    VARCHAR(15),
    DESCRIZIONE  VARCHAR(300),
    DATA         DATE
);

CREATE TABLE RAPPGENDIP (
    IDX         INTEGER NOT NULL,
    IDM         INTEGER,
    CODICE_DI   VARCHAR(15),
    DIPENDENTE  VARCHAR(100),
    ORE         NUMERIC(15,2),
    TIPO        VARCHAR(20),
    ORELAV      NUMERIC(15,2),
    ORESTRA     NUMERIC(15,2)
);

CREATE TABLE REGIVA (
    CODICE     VARCHAR(3) NOT NULL,
    DESCR      VARCHAR(50),
    TIPO       VARCHAR(50),
    SIGLA      VARCHAR(10),
    INTEST     VARCHAR(50),
    IND        VARCHAR(50),
    CITTA      VARCHAR(30),
    PV         VARCHAR(2),
    CAP        VARCHAR(10),
    TEL        VARCHAR(20),
    FAX        VARCHAR(20),
    EMAIL      VARCHAR(50),
    ABILITAFT  DM_BOOLEAN,
    INSANNOFT  DM_BOOLEAN
);

CREATE TABLE REGIVADET (
    CODICE  VARCHAR(3),
    ANNO    VARCHAR(4),
    DATA    DATE,
    NUMST   INTEGER,
    IDM     INTEGER NOT NULL
);

CREATE TABLE SCADPAG (
    IDX           INTEGER NOT NULL,
    CODICE        VARCHAR(15),
    CODICEPDC     VARCHAR(22),
    NUMDOC        VARCHAR(20),
    DATADOC       DATE,
    TOTDOC        NUMERIC(18,2),
    NUMRATE       INTEGER,
    RATA          INTEGER,
    DATASCADENZA  DATE,
    IMPORTO       NUMERIC(18,2),
    CON           VARCHAR(20),
    IDPNOTA       BIGINT,
    IDPNOTAANNO   VARCHAR(4)
);

CREATE TABLE SERVIZI (
    IDX            INTEGER NOT NULL,
    NUMPROG        INTEGER,
    DATA_RILASCIO  DATE,
    CODCLI         VARCHAR(22),
    CODART         VARCHAR(17),
    NOTE           VARCHAR(600)
);

CREATE TABLE SERVIZI_DET (
    IDS           INTEGER NOT NULL,
    NUM_OP        INTEGER,
    DATA_OP       DATE,
    SCADENZA      DATE,
    STATO         VARCHAR(100),
    IDX_SERVIZIO  INTEGER,
    IDX_ORDINE    INTEGER,
    NUM_ORD       FLOAT,
    DATA_ORD      DATE,
    QTA           DOUBLE PRECISION,
    PREZZO        DOUBLE PRECISION
);

CREATE TABLE TECNICI (
    CODICE  VARCHAR(3) CHARACTER SET WIN1251 NOT NULL,
    DESCR   VARCHAR(50) CHARACTER SET WIN1251
);

CREATE TABLE TMPREG (
    IDX    INTEGER,
    DESCR  VARCHAR(100)
);

CREATE TABLE TODOLIST (
    KY              VARCHAR(40),
    SUBJECT         VARCHAR(40),
    NOTES           VARCHAR(255),
    CREATIONDATE    TIMESTAMP,
    DUEDATE         TIMESTAMP,
    COMPLETIONDATE  TIMESTAMP,
    COMPLETE        DM_BOOLEAN,
    RESOURCE        VARCHAR(40),
    STATUS          NUMERIC(8,1),
    PRIORITY        NUMERIC(8,1)
);

CREATE TABLE TRASMERCE (
    IDX          INTEGER NOT NULL,
    NPROG        INTEGER,
    DESCRIZIONE  VARCHAR(200),
    DATA         DATE,
    CODART       VARCHAR(17),
    DESCART      VARCHAR(100),
    GIAC         NUMERIC(18,2),
    QTA          NUMERIC(18,2),
    TRASFOK      DM_BOOLEAN,
    CART1        VARCHAR(100),
    CART2        VARCHAR(100),
    CART3        VARCHAR(100),
    CART4        VARCHAR(100),
    DESC1        VARCHAR(100),
    DESC2        VARCHAR(100),
    DESC3        VARCHAR(100),
    DESC4        VARCHAR(100),
    PEC1         NUMERIC(18,2),
    PEC2         NUMERIC(18,2),
    PEC3         NUMERIC(18,2),
    PEC4         NUMERIC(18,2),
    QTA1         NUMERIC(18,2),
    QTA2         NUMERIC(18,2),
    QTA3         NUMERIC(18,2),
    QTA4         NUMERIC(18,2),
    CAUSALE      VARCHAR(5)
);

CREATE TABLE UTENTI (
    UTENTE     VARCHAR(30),
    USERID     VARCHAR(15) NOT NULL,
    VPASSWORD  VARCHAR(15),
    IPASSWORD  VARCHAR(15),
    CODLIV     INTEGER
);

CREATE TABLE VALUTE (
    CODICE  VARCHAR(30) NOT NULL,
    DESCR   VARCHAR(50),
    VALORE  NUMERIC(15,2)
);

CREATE TABLE ZCFCOMUNI (
    CODCOM       VARCHAR(12) NOT NULL,
    DESCRIZIONE  VARCHAR(30),
    PROVINCIA    VARCHAR(9),
    CAP          VARCHAR(9),
    CIRC         VARCHAR(18),
    PREFISSO     VARCHAR(18),
    INPS         VARCHAR(16),
    ISTAT        VARCHAR(19),
    ULSS         VARCHAR(9),
    NAZ          VARCHAR(10)
);

CREATE TABLE ZONE (
    CODICE       VARCHAR(3) NOT NULL,
    DESCRIZIONE  VARCHAR(30)
);



/******************************************************************************/
/****                          Unique constraints                          ****/
/******************************************************************************/

ALTER TABLE LOTTO ADD CONSTRAINT PK_LOTTO UNIQUE (IDX);
ALTER TABLE LOTTODET ADD CONSTRAINT PK_LOTTODET UNIQUE (IDX);
ALTER TABLE SCADPAG ADD CONSTRAINT PK_SCADPAG UNIQUE (IDX);


/******************************************************************************/
/****                             Primary keys                             ****/
/******************************************************************************/

ALTER TABLE ARTAGE ADD PRIMARY KEY (IDX);
ALTER TABLE ARTICOLI ADD CONSTRAINT PK_ARTICOLI1 PRIMARY KEY (CODICE);
ALTER TABLE ARTPRZSP ADD PRIMARY KEY (IDX);
ALTER TABLE ARTPRZVAR ADD PRIMARY KEY (IDX);
ALTER TABLE CAUSALI ADD CONSTRAINT PK_CAUSALI PRIMARY KEY (CODICE);
ALTER TABLE CAUSDETT ADD CONSTRAINT PK_CAUSDETT PRIMARY KEY (IDM);
ALTER TABLE CAUSTMERCE ADD CONSTRAINT PK_CAUSTMERCE PRIMARY KEY (CODICE);
ALTER TABLE CLIDOC ADD CONSTRAINT PK_CLIDOC1 PRIMARY KEY (IDX);
ALTER TABLE CLIDOCDET ADD CONSTRAINT PK_CLIDOCDET1 PRIMARY KEY (IDM);
ALTER TABLE CLIFOR ADD CONSTRAINT PK_CLIFOR PRIMARY KEY (CODPDC);
ALTER TABLE CLIFORSLEG ADD PRIMARY KEY (IDX);
ALTER TABLE CLISCOCAT ADD PRIMARY KEY (IDX);
ALTER TABLE CODIVA ADD CONSTRAINT CODIVA_PK PRIMARY KEY (CODIVA);
ALTER TABLE CONTRATTI ADD CONSTRAINT PK_CONTRATTI PRIMARY KEY (CODICE_CO);
ALTER TABLE DEPOSITI ADD CONSTRAINT PK_DEPOSITI PRIMARY KEY (CODICE);
ALTER TABLE DEST ADD CONSTRAINT PK_DEST1 PRIMARY KEY (CODICE);
ALTER TABLE DIPENDENTI ADD CONSTRAINT PK_DIPENDENTI PRIMARY KEY (CODICE_DI);
ALTER TABLE FORDOC ADD CONSTRAINT PK_FORDOC1 PRIMARY KEY (IDX);
ALTER TABLE FORDOCDET ADD CONSTRAINT PK_FORDOCDET1 PRIMARY KEY (IDM);
ALTER TABLE IMPIANTO ADD CONSTRAINT PK_IMPIANTO PRIMARY KEY (IDX);
ALTER TABLE INFODB ADD CONSTRAINT PK_INFODB PRIMARY KEY (IDX);
ALTER TABLE LAVORI ADD CONSTRAINT PK_LAVORIIDX PRIMARY KEY (IDX);
ALTER TABLE MOVFAT ADD CONSTRAINT IDM PRIMARY KEY (IDM);
ALTER TABLE MOVNOTA ADD CONSTRAINT MOVNOTA_PK PRIMARY KEY (IDM);
ALTER TABLE PAGAMENTI ADD CONSTRAINT PK_PAGAMENTI PRIMARY KEY (CODICE);
ALTER TABLE PDC ADD CONSTRAINT PK_PDC1 PRIMARY KEY (CODICEPDC);
ALTER TABLE PDCRI ADD PRIMARY KEY (CODICE);
ALTER TABLE PMCONTACTS ADD PRIMARY KEY (RECORDID);
ALTER TABLE PMEVENTS ADD PRIMARY KEY (RECORDID);
ALTER TABLE PMRESOURCES ADD PRIMARY KEY (RESOURCEID);
ALTER TABLE PMTASKS ADD PRIMARY KEY (RECORDID);
ALTER TABLE PNOTA ADD CONSTRAINT PK_PNOTA1 PRIMARY KEY (IDX);
ALTER TABLE RAPPGEN ADD CONSTRAINT PK_RAPPGEN PRIMARY KEY (IDX);
ALTER TABLE RAPPGENDIP ADD CONSTRAINT PK_RAPPGENDIP PRIMARY KEY (IDX);
ALTER TABLE SERVIZI ADD CONSTRAINT PK_SERVIZI PRIMARY KEY (IDX);
ALTER TABLE SERVIZI_DET ADD PRIMARY KEY (IDS);
ALTER TABLE TRASMERCE ADD CONSTRAINT PK_TRASMERCE PRIMARY KEY (IDX);
ALTER TABLE VALUTE ADD CONSTRAINT PK_VALUTE PRIMARY KEY (CODICE);
ALTER TABLE ZONE ADD CONSTRAINT PK_ZONE PRIMARY KEY (CODICE);


/******************************************************************************/
/****                             Foreign keys                             ****/
/******************************************************************************/

ALTER TABLE ARTCON ADD CONSTRAINT FK_ARTCON_1 FOREIGN KEY (CODICE) REFERENCES ARTICOLI (CODICE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ARTFORCOD ADD CONSTRAINT FK_ARTFORCOD_1 FOREIGN KEY (IDCODICE) REFERENCES ARTICOLI (CODICE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ARTICOLI ADD CONSTRAINT CODIVA_ARTICOLI_FK FOREIGN KEY (CODIVA) REFERENCES CODIVA (CODIVA);
ALTER TABLE ARTMOVCS ADD CONSTRAINT FK_ARTMOVCS_1 FOREIGN KEY (IDCODICE) REFERENCES ARTICOLI (CODICE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ARTPRZSP ADD CONSTRAINT FK_ARTPRZSP FOREIGN KEY (IDCODICE) REFERENCES ARTICOLI (CODICE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ARTPRZVAR ADD CONSTRAINT FK_ARTPRZVAR FOREIGN KEY (IDCODICE) REFERENCES ARTICOLI (CODICE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ARTSTAT ADD CONSTRAINT FK_ARTSTAT_1 FOREIGN KEY (CODICE) REFERENCES ARTICOLI (CODICE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CAUSDETT ADD CONSTRAINT FK_CAUSDETT_1 FOREIGN KEY (CODICEPDC) REFERENCES PDC (CODICEPDC) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CAUSDETT ADD CONSTRAINT FK_CAUSDETT_2 FOREIGN KEY (CODICE) REFERENCES CAUSALI (CODICE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CLIDOC ADD CONSTRAINT FK_CLIDOC_1 FOREIGN KEY (CODICEPDC) REFERENCES PDC (CODICEPDC) ON UPDATE CASCADE;
ALTER TABLE CLIDOCDET ADD CONSTRAINT CODIVA_CLIDOCDET_FK FOREIGN KEY (CODIVA) REFERENCES CODIVA (CODIVA) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CLIDOCDET ADD CONSTRAINT FK_CLIDOCDET_1 FOREIGN KEY (CODICE) REFERENCES ARTICOLI (CODICE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CLIDOCDET ADD CONSTRAINT FK_CLIDOCDET_3 FOREIGN KEY (IDX) REFERENCES CLIDOC (IDX) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CLIFORSLEG ADD CONSTRAINT FK_CLIFORSLEG_1 FOREIGN KEY (CODPDC) REFERENCES CLIFOR (CODPDC) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE FORDOC ADD CONSTRAINT FK_FORDOC_1 FOREIGN KEY (CODICEPDC) REFERENCES PDC (CODICEPDC) ON UPDATE CASCADE;
ALTER TABLE FORDOCDET ADD CONSTRAINT CODIVA_FORDOCDET_FK FOREIGN KEY (CODIVA) REFERENCES CODIVA (CODIVA) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE FORDOCDET ADD CONSTRAINT FK_FORDOCDET_1 FOREIGN KEY (CODICE) REFERENCES ARTICOLI (CODICE) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE FORDOCDET ADD CONSTRAINT FK_FORDOCDET_3 FOREIGN KEY (IDX) REFERENCES FORDOC (IDX) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE LOTTODET ADD CONSTRAINT FK_LOTTODET FOREIGN KEY (IDX) REFERENCES CLIDOCDET (IDM) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE MOVFAT ADD CONSTRAINT CODIVA_MOVFAT_FK FOREIGN KEY (CODIVA) REFERENCES CODIVA (CODIVA) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE MOVFAT ADD CONSTRAINT FK_MOVFAT_1 FOREIGN KEY (IDX) REFERENCES PNOTA (IDX) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE MOVNOTA ADD CONSTRAINT FK_MOVNOTA_1 FOREIGN KEY (CONTO) REFERENCES PDC (CODICEPDC) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE MOVNOTA ADD CONSTRAINT FK_MOVNOTA_2 FOREIGN KEY (IDX) REFERENCES PNOTA (IDX) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PNOTA ADD CONSTRAINT FK_PNOTA_1 FOREIGN KEY (CAUS) REFERENCES CAUSALI (CODICE) ON DELETE CASCADE ON UPDATE CASCADE;


/******************************************************************************/
/****                               Indices                                ****/
/******************************************************************************/

CREATE UNIQUE INDEX IDX_ARTCON ON ARTCON (IDX);
CREATE UNIQUE INDEX ARTGIA_IDX1 ON ARTGIA (CODICEFULL);
CREATE INDEX ARTICOLICODIVA ON ARTICOLI (CODIVA);
CREATE INDEX BARCODE ON ARTICOLI (BARCODE);
CREATE INDEX CODICEPDC ON ARTICOLI (CRICAVI);
CREATE INDEX DESCRIZ ON ARTICOLI (DESCR);
CREATE INDEX FORNITAB ON ARTICOLI (FORNITAB);
CREATE INDEX IDX_ARTICOLI_TIPOART ON ARTICOLI (TIPOART);
CREATE INDEX CODICE_IDX ON ARTLISTCLI (CODICE);
CREATE UNIQUE INDEX IDX_ARTLISTCLI ON ARTLISTCLI (IDX);
CREATE INDEX ANNO ON ARTSTAT (ANNO);
CREATE INDEX IDX_AUTOMEZZI_CODICE ON AUTOMEZZI (CODICE);
CREATE INDEX IDX_CCOSTO_CODICE ON CCOSTO (CODICE);
CREATE INDEX IDDOCPRI ON CLIDOC (IDDOCPRI);
CREATE INDEX IDX_CLIDOC_NUMDOC ON CLIDOC (NUMDOC);
CREATE INDEX IDX_CLIDOC_REGIVA ON CLIDOC (REGIVA);
CREATE INDEX IDX_CLIDOC_TIPO ON CLIDOC (TIPO);
/*CREATE INDEX IDM ON CLIDOCDET (IDM);*/
CREATE INDEX IDXORD ON CLIDOCDET (IDXORD);
CREATE INDEX NUMDOC ON CLIDOCDET (NUMDOC);
CREATE INDEX CLIFOR_IDX1 ON CLIFOR (IDX);
CREATE INDEX CLIFORSLEG_IDX1 ON CLIFORSLEG (CODPDC);
CREATE UNIQUE INDEX CODIVA ON CODIVA (CODIVA);
CREATE INDEX CONTR ON DEST (CONTR);
CREATE INDEX VC ON DEST (VC);
CREATE UNIQUE INDEX IDXCODEST ON DESTMERCE (CODDEST);
CREATE INDEX IDX_FORDOC ON FORDOC (IDDOCPRI);
CREATE UNIQUE INDEX IDXCODGRBR ON GRBORDERO (CODGRBR);
CREATE UNIQUE INDEX IDX_LIQIVA ON LIQIVA (IDX);
CREATE UNIQUE INDEX CODICEIDX ON LIVELLI (CODICE);
CREATE INDEX IDX_LOTTODET_IDM ON LOTTODET (IDM);
CREATE INDEX NUMPROG ON MOVFAT (NUMREG);
CREATE INDEX IDX ON MOVNOTA (IDX);
CREATE INDEX CODICE ON PDC (CODICEMA);
CREATE INDEX CODICECLI ON PDC (CODICECLI);
CREATE INDEX CODICEFOR ON PDC (CODICEFOR);
CREATE UNIQUE INDEX IDXCODICE ON PDCRI (CODICE);
CREATE INDEX IDX_PLANASS ON PLANASS (IDX);
CREATE UNIQUE INDEX PLANDB0 ON PLANDB (PLANNERKEY);
CREATE INDEX CLIFOR ON PNOTA (CLIFOR);
CREATE INDEX NUMREG ON PNOTA (NUMREG);
CREATE INDEX IDX_REGIVA_CODICE ON REGIVA (CODICE);
CREATE UNIQUE INDEX IDX_ZCFCOMUNI ON ZCFCOMUNI (CODCOM);


/******************************************************************************/
/****                               Triggers                               ****/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/****                         Triggers for tables                          ****/
/******************************************************************************/



/* Trigger: AGGACQART */
CREATE TRIGGER AGGACQART FOR FORDOCDET
ACTIVE AFTER INSERT OR UPDATE OR DELETE POSITION 0
AS  
 BEGIN     
 END
^

/* Trigger: AGGVENART */
CREATE TRIGGER AGGVENART FOR CLIDOCDET
ACTIVE AFTER INSERT OR UPDATE OR DELETE POSITION 0
AS  
 BEGIN     
 END
^

/* Trigger: AI_ARTAGE_IDX */
CREATE TRIGGER AI_ARTAGE_IDX FOR ARTAGE
ACTIVE BEFORE INSERT POSITION 0
AS 
     BEGIN 
       IF (NEW.IDX IS NULL) THEN 
           NEW.IDX = GEN_ID(ARTAGE_IDX_GEN, 1); 
     END
^

/* Trigger: AI_ARTCON_IDX */
CREATE TRIGGER AI_ARTCON_IDX FOR ARTCON
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.IDX IS NULL) THEN
      NEW.IDX = GEN_ID(ARTCON_IDX_GEN, 1);
END
^

/* Trigger: AI_ARTLISTCLI_IDX */
CREATE TRIGGER AI_ARTLISTCLI_IDX FOR ARTCON
ACTIVE BEFORE INSERT POSITION 0
AS  
    BEGIN  
      IF (NEW.IDX IS NULL) THEN 
         NEW.IDX = GEN_ID(ARTLISTCLI_IDX_GEN, 1); 
    END
^

/* Trigger: AI_ARTPRZSP_IDX */
CREATE TRIGGER AI_ARTPRZSP_IDX FOR ARTPRZSP
ACTIVE BEFORE INSERT POSITION 0
AS 
     BEGIN 
       IF (NEW.IDX IS NULL) THEN 
           NEW.IDX = GEN_ID(ARTPRZSP_IDX_GEN, 1); 
     END
^

/* Trigger: AI_ARTPRZVAR_IDX */
CREATE TRIGGER AI_ARTPRZVAR_IDX FOR ARTPRZVAR
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN  
  IF (NEW.IDX IS NULL) THEN   
      NEW.IDX = GEN_ID(ARTPRZVAR_IDX_GEN, 1);  
  END
^

/* Trigger: AI_CESPITIAMM_IDM */
CREATE TRIGGER AI_CESPITIAMM_IDM FOR CESPITIAMM
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.IDM IS NULL) THEN
      NEW.IDM = GEN_ID(CESPITIAMM_IDM_GEN, 1);
END
^

/* Trigger: AI_CESPITI_IDX */
CREATE TRIGGER AI_CESPITI_IDX FOR CESPITI
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.IDX IS NULL) THEN
      NEW.IDX = GEN_ID(CESPITI_IDX_GEN, 1);
END
^

/* Trigger: AI_IMPIANTO_IDX */
CREATE TRIGGER AI_IMPIANTO_IDX FOR IMPIANTO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.IDX IS NULL) THEN
      NEW.IDX = GEN_ID(IMPIANTO_IDX_GEN, 1);
END
^

/* Trigger: AI_INFODB_IDX */
CREATE TRIGGER AI_INFODB_IDX FOR INFODB
ACTIVE BEFORE INSERT POSITION 0
AS    BEGIN      IF (NEW.IDX IS NULL) THEN          NEW.IDX = GEN_ID(INFODB_IDX_GEN, 1);    END
^

/* Trigger: AI_LIQIVA_IDX */
CREATE TRIGGER AI_LIQIVA_IDX FOR LIQIVA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.IDX IS NULL) THEN
      NEW.IDX = GEN_ID(LIQIVA_IDX_GEN, 1);
END
^

/* Trigger: AI_LOTTODET_IDX */
CREATE TRIGGER AI_LOTTODET_IDX FOR LOTTODET
ACTIVE BEFORE INSERT POSITION 0
AS 
     BEGIN 
       IF (NEW.IDX IS NULL) THEN 
           NEW.IDX = GEN_ID(LOTTODET_IDX_GEN, 1); 
     END
^

/* Trigger: AI_LOTTO_IDX */
CREATE TRIGGER AI_LOTTO_IDX FOR LOTTO
ACTIVE BEFORE INSERT POSITION 0
AS 
     BEGIN 
       IF (NEW.IDX IS NULL) THEN 
           NEW.IDX = GEN_ID(LOTTO_IDX_GEN, 1); 
     END
^

/* Trigger: AI_PLANASS_IDX */
CREATE TRIGGER AI_PLANASS_IDX FOR PLANASS
ACTIVE BEFORE INSERT POSITION 0
AS  BEGIN   IF (NEW.IDX IS NULL) THEN       NEW.IDX = GEN_ID(PLANASS_IDX_GEN, 1);  END
^

/* Trigger: AI_REGIVADET_IDM */
CREATE TRIGGER AI_REGIVADET_IDM FOR REGIVADET
ACTIVE BEFORE INSERT POSITION 0
AS 
 BEGIN 
  IF (NEW.IDM IS NULL) THEN 
      NEW.IDM = GEN_ID(REGIVADET_IDM_GEN, 1); 
 END
^

/* Trigger: AI_SCADPAG_IDX */
CREATE TRIGGER AI_SCADPAG_IDX FOR SCADPAG
ACTIVE BEFORE INSERT POSITION 0
AS 
     BEGIN 
       IF (NEW.IDX IS NULL) THEN 
           NEW.IDX = GEN_ID(SCADPAG_IDX_GEN, 1); 
     END
^

/* Trigger: AI_TRASMERCE_IDX */
CREATE TRIGGER AI_TRASMERCE_IDX FOR TRASMERCE
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
  IF (NEW.IDX IS NULL) THEN
      NEW.IDX = GEN_ID(TRASMERCE_IDX_GEN, 1);
 END
^

/* Trigger: CLIFORSLEG_BI */
CREATE TRIGGER CLIFORSLEG_BI FOR CLIFORSLEG
ACTIVE BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.IDX IS NULL) THEN 
  NEW.IDX = GEN_ID(GEN_CLIFORSLEG_ID,1); 
END
^

/* Trigger: CLIFOR_BI */
CREATE TRIGGER CLIFOR_BI FOR CLIFOR
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.IDX IS NULL) THEN
    NEW.IDX = GEN_ID(CLIFOR_IDX_INC,1);
END
^

/* Trigger: CLISCOCAT_BI */
CREATE TRIGGER CLISCOCAT_BI FOR CLISCOCAT
ACTIVE BEFORE INSERT POSITION 0
AS                                         
     BEGIN                                      
       IF (NEW.IDX IS NULL) THEN                
         NEW.IDX = GEN_ID(GEN_CLISCOCAT_ID,1);  
     END
^

/* Trigger: LAVORI_BI */
CREATE TRIGGER LAVORI_BI FOR LAVORI
ACTIVE BEFORE INSERT POSITION 0
AS    BEGIN    IF (NEW.idx IS NULL) THEN      NEW.idx = GEN_ID(gen_lavori_id,1);   END
^

/* Trigger: RAPPGENDIP_BI */
CREATE TRIGGER RAPPGENDIP_BI FOR RAPPGENDIP
ACTIVE BEFORE INSERT POSITION 0
AS    BEGIN    IF (NEW.idx IS NULL) THEN      NEW.idx = GEN_ID(gen_rappgendip_id,1);   END
^

/* Trigger: RAPPGEN_BI */
CREATE TRIGGER RAPPGEN_BI FOR RAPPGEN
ACTIVE BEFORE INSERT POSITION 0
AS    BEGIN    IF (NEW.idx IS NULL) THEN      NEW.idx = GEN_ID(gen_rappgen_id,1);   END
^

/* Trigger: SERVIZI_BI */
CREATE TRIGGER SERVIZI_BI FOR SERVIZI
ACTIVE BEFORE INSERT POSITION 0
AS  BEGIN    IF (NEW.idx IS NULL) THEN      NEW.idx = GEN_ID(gen_servizi_id,1);  END
^

/* Trigger: SERVIZI_DET_BI */
CREATE TRIGGER SERVIZI_DET_BI FOR SERVIZI_DET
ACTIVE BEFORE INSERT POSITION 0
AS  BEGIN    IF (NEW.ids IS NULL) THEN      NEW.ids = GEN_ID(gen_servizi_det_id,1);  END
^

/* Trigger: SET_CAUSDETT_CONTA */
CREATE TRIGGER SET_CAUSDETT_CONTA FOR CAUSDETT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.IDM IS NULL) THEN NEW.IDM = GEN_ID(causdett_idm_inc, 1);
END
^

/* Trigger: SET_CLIDOCDET_IDM */
CREATE TRIGGER SET_CLIDOCDET_IDM FOR CLIDOCDET
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.IDM IS NULL) THEN
      NEW.IDM = GEN_ID(CLIDOCDET_IDM_INC, 1);
END
^

/* Trigger: SET_CLIDOC_IDX */
CREATE TRIGGER SET_CLIDOC_IDX FOR CLIDOC
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.IDX IS NULL) THEN
      NEW.IDX = GEN_ID(CLIDOC_IDX_INC, 0);
END
^

/* Trigger: SET_MOVFAT_CONTA */
CREATE TRIGGER SET_MOVFAT_CONTA FOR MOVFAT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
   IF (NEW.IDM IS NULL) THEN NEW.IDM = GEN_ID(movfat_conta_inc, 1);
END
^

/* Trigger: SET_MOVNOTA_CONTA */
CREATE TRIGGER SET_MOVNOTA_CONTA FOR MOVNOTA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
   IF (NEW.IDM IS NULL) THEN NEW.IDM = GEN_ID(movnota_conta_inc, 1);
END
^

/* Trigger: SET_PNOTA_IDX */
CREATE TRIGGER SET_PNOTA_IDX FOR PNOTA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
IF (NEW.IDX IS NULL) THEN NEW.IDX = GEN_ID(PNota_IDX_INC, 1);
END
^
SET TERM ; ^



/******************************************************************************/
/****                          Stored procedures                           ****/
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE AGG_CONTI_MOVNOTA
AS
DECLARE VARIABLE CONTO VARCHAR(22);
DECLARE VARIABLE MA VARCHAR(2);
DECLARE VARIABLE CO VARCHAR(20);
DECLARE VARIABLE SO VARCHAR(20);
BEGIN
    FOR SELECT
            MOVNOTA.CONTO
        FROM
            MOVNOTA
        GROUP BY
            MOVNOTA.CONTO
        INTO :CONTO
        DO BEGIN
           SELECT
              PDC.CODICEMA,
              PDC.CODICECO,
              PDC.CODICESO
           FROM
              PDC
           WHERE
              (PDC.CODICEPDC = :CONTO)
           INTO :MA, :CO, :SO;
           IF (MA <> '') THEN BEGIN
              UPDATE MOVNOTA
                 SET CODICEMA = :MA,
                     CODICECO = :CO,
                     CODICESO = :SO
              WHERE CONTO = :CONTO;
           END
       END
END^


ALTER PROCEDURE AGGART (
    NEWANNO VARCHAR(4))
AS
    DECLARE VARIABLE CODICE VARCHAR(17); 
    DECLARE VARIABLE GIA INTEGER; 
    DECLARE VARIABLE CONTA INTEGER; 
    BEGIN 
        FOR SELECT ARTICOLI.CODICE 
           FROM ARTICOLI 
           INTO :CODICE 
           DO BEGIN 
               SELECT COUNT(*) FROM ARTGIA WHERE CODICE=:CODICE AND ANNO = :NEWANNO INTO :CONTA; 
               IF (CONTA>0) THEN BEGIN 
                   UPDATE ARTGIA SET GIA = (COALESCE(RIM,0) + COALESCE(QTAACQ,0) - COALESCE(QTAVEN,0)) WHERE CODICE=:CODICE AND ANNO = :NEWANNO; 
               END ELSE BEGIN 
                  INSERT INTO ARTGIA (CODICE, CODDEP, 
                                      GIA,QTAVEN, 
                                      QTAACQ,RIM, 
                                      SCORTA, ANNO, CODICEFULL) 
                         VALUES(:CODICE, 0, 
                                0,0, 
                                0,0, 
                                0, :NEWANNO, :NEWANNO||:CODICE); 
               END 
           END 
    END^


ALTER PROCEDURE AGGARTACQ (
    CODART VARCHAR(17),
    NEWANNO VARCHAR(4))
AS
DECLARE VARIABLE CODICE VARCHAR(17); 
    DECLARE VARIABLE CONTA INTEGER; 
    DECLARE VARIABLE QTA FLOAT; 
    BEGIN 
       IF (CODART='') THEN BEGIN 
         FOR SELECT ARTGIA.CODICE 
             FROM ARTGIA 
             WHERE (ARTGIA.ANNO = :NEWANNO) 
             INTO :CODICE 
             DO BEGIN 
                    UPDATE ARTGIA SET QTAACQ = 0 
                    WHERE (CODICE=:CODICE) AND (ANNO = :NEWANNO); 
             END 
        FOR SELECT  FORDOCDET.CODICE,  SUM (FORDOCDET.QTA) * FORDOCDET.fattoregia AS QTA 
          FROM   FORDOC 
            INNER JOIN FORDOCDET ON (FORDOC.IDX = FORDOCDET.IDX) 
                WHERE  ((FORDOC.TIPO = 'FA') OR (FORDOC.TIPO = 'NC') OR (FORDOC.TIPO = 'DDT') OR (FORDOC.TIPO = 'BUO')) AND 
                   (EXTRACT(YEAR FROM FORDOC.DataREG)=:NEWANNO) 
                 GROUP BY 
                   FORDOCDET.CODICE, FORDOCDET.fattoregia 
            INTO :CODICE, :QTA 
           DO BEGIN 
               SELECT COUNT(*) FROM ARTGIA WHERE CODICE=:CODICE AND  ANNO = :NEWANNO INTO :CONTA; 
               IF (CONTA>0) THEN BEGIN 
                  UPDATE ARTGIA 
                  SET QTAACQ = :QTA 
                  WHERE (CODICE=:CODICE) AND (ANNO = :NEWANNO); 
               END ELSE BEGIN 
                  INSERT INTO ARTGIA (CODICE, RIM, GIA,QTAACQ, QTAVEN, SCORTA, ANNO, CODICEFULL) 
                         VALUES(:CODICE, 0, :QTA, 0,0, 0, :NEWANNO, :NEWANNO||:CODICE); 
               END 
           END 
           UPDATE ARTGIA SET GIA = RIM + QTAACQ - QTAVEN  
           WHERE (ANNO = :NEWANNO); 
      END ELSE BEGIN 
         FOR SELECT ARTGIA.CODICE 
             FROM ARTGIA 
             WHERE (ARTGIA.ANNO = :NEWANNO) AND ARTGIA.CODICE = :CODART 
             INTO :CODICE 
             DO BEGIN 
                    UPDATE ARTGIA SET QTAACQ = 0 
                    WHERE (CODICE=:CODICE) AND (ANNO = :NEWANNO); 
             END 
        FOR SELECT  FORDOCDET.CODICE,  SUM (FORDOCDET.QTA) * FORDOCDET.fattoregia AS QTA 
          FROM   FORDOC 
              INNER JOIN FORDOCDET ON (FORDOC.IDX = FORDOCDET.IDX) 
                WHERE  ((FORDOC.TIPO = 'FA') OR (FORDOC.TIPO = 'NC') OR (FORDOC.TIPO = 'DDT') OR (FORDOC.TIPO = 'BUO'))  AND 
                   (EXTRACT(YEAR FROM FORDOC.DataREG)=:NEWANNO) AND (FORDOCDET.CODICE=:CODART) 
                 GROUP BY 
                   FORDOCDET.CODICE,   FORDOCDET.fattoregia  
            INTO :CODICE, :QTA 
        DO BEGIN 
               SELECT COUNT(*) FROM ARTGIA WHERE CODICE=:CODICE AND  ANNO = :NEWANNO INTO :CONTA; 
               IF (CONTA>0) THEN BEGIN 
                  UPDATE ARTGIA 
                  SET QTAACQ = :QTA 
                  WHERE (CODICE=:CODICE) AND (ANNO = :NEWANNO); 
               END ELSE BEGIN 
                  INSERT INTO ARTGIA (CODICE, RIM, GIA,QTAACQ, QTAVEN, SCORTA, ANNO, CODICEFULL) 
                         VALUES(:CODICE, 0, :QTA, 0, 0, 0, :NEWANNO, :NEWANNO||:CODICE); 
               END 
           END 
           UPDATE ARTGIA SET GIA = RIM + QTAACQ - QTAVEN  
           WHERE (CODICE=:CODART) AND (ANNO = :NEWANNO); 
      END 
    END^


ALTER PROCEDURE AGGARTSTMEN (
    ANNO VARCHAR(4),
    AV VARCHAR(1))
AS
      DECLARE VARIABLE CONTA INTEGER; 
      DECLARE VARIABLE CODICE VARCHAR(17); 
      DECLARE VARIABLE MESE INTEGER; 
      DECLARE VARIABLE DATA DATE; 
      DECLARE VARIABLE QTA FLOAT; 
      DECLARE VARIABLE PREZZO FLOAT; 
      DECLARE VARIABLE IMP FLOAT; 
      DECLARE VARIABLE OQTA FLOAT; 
      DECLARE VARIABLE OPREZZO FLOAT; 
      DECLARE VARIABLE OIMP FLOAT; 
      BEGIN 
          FOR SELECT ARTSTAT.CODICE, ARTSTAT.MESE 
              FROM ARTSTAT 
              WHERE ARTSTAT.ANNO = :ANNO 
              INTO :CODICE, :MESE 
              DO BEGIN 
              IF (AV='A') THEN BEGIN 
                 UPDATE ARTSTAT 
                  SET QTAACQ = 0, IMPACQ = 0,ULTDATAACQ = NULL, ULTPREZACQ = 0 
                  WHERE 
                  CODICE = :CODICE AND ANNO = :ANNO AND MESE = :MESE; 
              END ELSE  IF (AV='V') THEN  BEGIN 
                  UPDATE ARTSTAT 
                  SET QTAVEN = 0, IMPVEN = 0,ULTDATAVEN = NULL, ULTPREZVEN = 0 
                  WHERE 
                  CODICE = :CODICE AND ANNO = :ANNO AND MESE = :MESE; 
              END 
          END 
          IF (AV='A') THEN BEGIN 
             FOR SELECT FORDOC.DATA, FORDOCDET.CODICE, FORDOCDET.QTA, 
                 FORDOCDET.PREZZO, FORDOCDET.IMP, EXTRACT(MONTH FROM Data) 
                 FROM FORDOC 
                 INNER JOIN FORDOCDET ON (FORDOC.IDX = FORDOCDET.IDX) 
                 WHERE 
                 (FORDOC.TIPO IN ('DDT','FA','NC','BOR')) AND 
                    (EXTRACT(YEAR FROM Data) = :ANNO) 
                 ORDER BY  FORDOC.NUMDOC 
                 INTO :DATA, :CODICE, :QTA, :PREZZO, :IMP, :MESE 
                 DO BEGIN 
                    SELECT QTAACQ , IMPACQ, ULTPREZACQ 
                    FROM ARTSTAT 
                    WHERE CODICE=:CODICE AND 
                    ANNO = :ANNO AND 
                    MESE = :MESE 
                    INTO :OQTA, :OIMP, :OPREZZO; 
                    IF (:OQTA IS NULL) THEN OQTA = 0; 
                    IF (:OPREZZO IS NULL) THEN OPREZZO = 0; 
                    IF (:OIMP IS NULL) THEN OIMP = 0; 
                    OQTA = OQTA + QTA; 
                    OPREZZO = PREZZO; 
                    OIMP = OIMP + IMP; 
                    SELECT COUNT(*) 
                    FROM ARTSTAT 
                    WHERE CODICE=:CODICE AND 
                      ANNO = :ANNO AND 
                      MESE = :MESE 
                    INTO :CONTA; 
                    IF (CONTA>0) THEN BEGIN 
                       UPDATE ARTSTAT 
                       SET QTAACQ = :OQTA, IMPACQ = :OIMP, ULTDATAACQ =:DATA, ULTPREZACQ = :OPREZZO 
                       WHERE CODICE = :CODICE AND ANNO = :ANNO AND MESE = :MESE; 
                    END ELSE BEGIN 
                       IF (:OQTA IS NULL) THEN OQTA = 0; 
                       IF (:OPREZZO IS NULL) THEN OPREZZO = 0; 
                       IF (:OIMP IS NULL) THEN OIMP = 0; 
                       INSERT 
                       INTO ARTSTAT (CODICE, ANNO, MESE, 
                       QTAACQ, IMPACQ, ULTDATAACQ, ULTPREZACQ) 
                       VALUES (:CODICE, :ANNO, :MESE, 
                       :OQTA, :OIMP, :DATA, :OPREZZO); 
                    END 
                END 
            END ELSE  IF (AV='V') THEN BEGIN 
                FOR SELECT CLIDOC.DATA, CLIDOCDET.CODICE, CLIDOCDET.QTA, 
                CLIDOCDET.PREZZO, CLIDOCDET.IMP, EXTRACT(MONTH FROM Data) 
                FROM CLIDOC 
                INNER JOIN CLIDOCDET ON (CLIDOC.IDX = CLIDOCDET.IDX) 
                WHERE 
                (CLIDOC.TIPO IN ('DDT','FA','NC','BOR')) AND 
                (EXTRACT(YEAR FROM Data) = :ANNO) 
                ORDER BY 
                CLIDOC.NUMDOC 
                INTO :DATA, :CODICE, :QTA, :PREZZO, :IMP, :MESE 
                DO BEGIN 
                   SELECT QTAVEN , IMPVEN, ULTPREZVEN 
                   FROM ARTSTAT 
                   WHERE CODICE=:CODICE AND 
                   ANNO = :ANNO AND MESE = :MESE 
                   INTO :OQTA, :OIMP, :OPREZZO; 
                   IF (:OQTA IS NULL) THEN OQTA = 0; 
                   IF (:OPREZZO IS NULL) THEN OPREZZO = 0; 
                   IF (:OIMP IS NULL) THEN OIMP = 0; 
                   OQTA = OQTA + QTA; 
                   OPREZZO = PREZZO; 
                   OIMP = OIMP + IMP; 
                   SELECT COUNT(*) 
                   FROM ARTSTAT 
                   WHERE CODICE=:CODICE AND 
                   ANNO = :ANNO AND MESE = :MESE 
                   INTO :CONTA; 
                   IF (:OQTA IS NULL) THEN OQTA = 0; 
                   IF (:OPREZZO IS NULL) THEN OPREZZO = 0; 
                   IF (:OIMP IS NULL) THEN OIMP = 0; 
                   IF (CONTA>0) THEN BEGIN 
                      UPDATE ARTSTAT 
                      SET QTAVEN = :OQTA, IMPVEN = :OIMP, ULTDATAVEN = :DATA, ULTPREZVEN = :OPREZZO 
                      WHERE CODICE = :CODICE AND ANNO = :ANNO AND MESE = :MESE; 
                   END ELSE BEGIN 
                      INSERT 
                      INTO ARTSTAT (CODICE, ANNO, MESE, 
                      QTAVEN, IMPVEN, ULTDATAVEN, ULTPREZVEN) 
                      VALUES (:CODICE, :ANNO, :MESE, 
                      :OQTA, :OIMP, :DATA, :OPREZZO); 
                   END 
               END 
            END 
        END^


ALTER PROCEDURE AGGARTVEN (
    CODART VARCHAR(17),
    NEWANNO VARCHAR(4))
AS
DECLARE VARIABLE CODICE VARCHAR(17); 
    DECLARE VARIABLE CONTA INTEGER; 
    DECLARE VARIABLE QTA FLOAT; 
    BEGIN 
       IF (CODART='') THEN BEGIN 
         FOR SELECT ARTGIA.CODICE 
             FROM ARTGIA 
             WHERE (ARTGIA.ANNO = :NEWANNO) 
             INTO :CODICE 
             DO BEGIN 
                    UPDATE ARTGIA SET QTAVEN = 0 
                    WHERE (CODICE=:CODICE) AND (ANNO = :NEWANNO); 
             END 
        FOR SELECT  CLIDOCDET.CODICE,  SUM (CLIDOCDET.QTA) * CLIDOCDET.fattoregia AS QTA  
          FROM   CLIDOC 
            INNER JOIN CLIDOCDET ON (CLIDOC.IDX = CLIDOCDET.IDX) 
                WHERE  ((CLIDOC.TIPO = 'FA') OR (CLIDOC.TIPO = 'NC') OR (CLIDOC.TIPO = 'DDT') OR (CLIDOC.TIPO = 'BUO') OR (CLIDOC.TIPO = 'COR')) AND 
                   (EXTRACT(YEAR FROM CLIDOC.Data)=:NEWANNO) 
                 GROUP BY 
                   CLIDOCDET.CODICE, CLIDOCDET.fattoregia 
            INTO :CODICE, :QTA 
           DO BEGIN 
               SELECT COUNT(*) FROM ARTGIA WHERE CODICE=:CODICE AND  ANNO = :NEWANNO INTO :CONTA; 
               IF (CONTA>0) THEN BEGIN 
                  UPDATE ARTGIA 
                  SET QTAVEN = :QTA 
                  WHERE (CODICE=:CODICE) AND (ANNO = :NEWANNO); 
               END ELSE BEGIN 
                  INSERT INTO ARTGIA (CODICE, RIM, GIA,QTAACQ, QTAVEN, SCORTA, ANNO) 
                         VALUES(:CODICE, 0, 0, :QTA,0, 0, :NEWANNO); 
               END 
           END 
           UPDATE ARTGIA SET GIA = RIM + QTAACQ - QTAVEN  
           WHERE (ANNO = :NEWANNO); 
      END ELSE BEGIN 
         FOR SELECT ARTGIA.CODICE 
             FROM ARTGIA 
             WHERE (ARTGIA.ANNO = :NEWANNO) AND ARTGIA.CODICE = :CODART 
             INTO :CODICE 
             DO BEGIN 
                    UPDATE ARTGIA SET QTAVEN = 0 
                    WHERE (CODICE=:CODICE) AND (ANNO = :NEWANNO); 
             END 
        FOR SELECT  CLIDOCDET.CODICE,  SUM (CLIDOCDET.QTA) * CLIDOCDET.fattoregia AS QTA 
          FROM   CLIDOC 
            INNER JOIN CLIDOCDET ON (CLIDOC.IDX = CLIDOCDET.IDX) 
                WHERE  ((CLIDOC.TIPO = 'FA') OR (CLIDOC.TIPO = 'NC') OR (CLIDOC.TIPO = 'DDT') OR (CLIDOC.TIPO = 'BUO') OR (CLIDOC.TIPO = 'COR'))  AND 
                   (EXTRACT(YEAR FROM CLIDOC.Data)=:NEWANNO) AND (CLIDOCDET.CODICE=:CODART) 
                 GROUP BY 
                   CLIDOCDET.CODICE, CLIDOCDET.fattoregia 
            INTO :CODICE, :QTA 
           DO BEGIN 
               SELECT COUNT(*) FROM ARTGIA WHERE CODICE=:CODICE AND  ANNO = :NEWANNO INTO :CONTA; 
               IF (CONTA>0) THEN BEGIN 
                  UPDATE ARTGIA 
                  SET QTAVEN = :QTA 
                  WHERE (CODICE=:CODICE) AND (ANNO = :NEWANNO); 
               END ELSE BEGIN 
                  INSERT INTO ARTGIA (CODICE, RIM, GIA,QTAACQ, QTAVEN, SCORTA, ANNO) 
                         VALUES(:CODICE, 0, 0, :QTA,0, 0, :NEWANNO); 
               END 
           END 
           UPDATE ARTGIA SET GIA = RIM + QTAACQ - QTAVEN  
           WHERE (CODICE=:CODART) AND (ANNO = :NEWANNO); 
      END 
    END^


ALTER PROCEDURE AGGRIM (
    OLDANNO VARCHAR(4),
    NEWANNO VARCHAR(4))
AS
    DECLARE VARIABLE CODICE VARCHAR(17); 
    DECLARE VARIABLE CONTA INTEGER; 
    DECLARE VARIABLE GIA FLOAT; 
    DECLARE VARIABLE SCORTA FLOAT; 
    BEGIN 
        FOR SELECT ARTGIA.CODICE, ARTGIA.GIA, ARTGIA.SCORTA 
           FROM ARTGIA 
           WHERE (ARTGIA.ANNO = :OLDANNO) 
           INTO :CODICE, :GIA, :SCORTA 
           DO BEGIN 
               SELECT COUNT(*) FROM ARTGIA WHERE CODICE=:CODICE AND  ANNO = :NEWANNO INTO :CONTA; 
               IF (CONTA>0) THEN BEGIN 
                  UPDATE ARTGIA 
                  SET SCORTA = :SCORTA, 
                      RIM = :GIA, CODICEFULL = :NEWANNO||:CODICE,  
                      GIA = :GIA + COALESCE(QTAACQ,0) - COALESCE(QTAVEN,0)  /*  PONGO GIA = RIM PER IL NUOVO ANNO */ 
                  WHERE (CODICE=:CODICE) AND (ANNO = :NEWANNO); 
               END ELSE BEGIN 
                  INSERT INTO ARTGIA (CODICE, RIM, GIA,QTAACQ, QTAVEN, SCORTA, ANNO, CODICEFULL)   
                      VALUES(:CODICE, :GIA, 0, 0, 0, 0, :NEWANNO, :NEWANNO||:CODICE);  
               END 
           END 
    END^


ALTER PROCEDURE BILANCIO1 (
    NATURA VARCHAR(20),
    DATA1 VARCHAR(10),
    DATA2 VARCHAR(10))
RETURNS (
    CODICE VARCHAR(20),
    MA VARCHAR(20),
    CO VARCHAR(20),
    SO VARCHAR(20),
    DESCRIZIONE VARCHAR(100),
    DARE FLOAT,
    AVERE FLOAT,
    SALDO FLOAT)
AS
DECLARE VARIABLE TIPO VARCHAR(20);
BEGIN
   FOR SELECT
          PDC.CODICEPDC,
          PDC.CODICEMA,
          PDC.CODICECO,
          PDC.CODICESO,
          PDC.DESCRIZIONE,
          PDC.TIPO
   FROM PDC
   WHERE (PDC.NATURA = :NATURA)
   ORDER BY
        PDC.CODICEMA,
        PDC.CODICECO,
        PDC.CODICESO
   INTO :CODICE, :MA, :CO, :SO, :DESCRIZIONE, :TIPO

   DO
     BEGIN
       IF ((TIPO='1') OR (TIPO='2')) THEN BEGIN
          SELECT
               SUM(MovNota.Dare) AS TDare,
               SUM(MovNota.Avere) AS TAvere,
               SUM(MOVNOTA.DARE)  - SUM(MOVNOTA.AVERE)  AS SALDO
          FROM PNOTA
               INNER JOIN MOVNOTA ON (PNOTA.IDX = MOVNOTA.IDX)
               INNER JOIN PDC ON (MOVNOTA.CONTO = PDC.CODICEPDC)
         WHERE
           (MOVNOTA.CONTO LIKE :CODICE || '%') AND
           (PDC.NATURA = :NATURA) AND
           (MOVNOTA.DATA BETWEEN :DATA1 AND :DATA2) 
         INTO :DARE, :AVERE, :SALDO;
      END ELSE BEGIN
          SELECT
               SUM(MovNota.Dare) AS TDare,
               SUM(MovNota.Avere) AS TAvere,
               SUM(MOVNOTA.DARE)  - SUM(MOVNOTA.AVERE)  AS SALDO
          FROM PNOTA
               INNER JOIN MOVNOTA ON (PNOTA.IDX = MOVNOTA.IDX)
               INNER JOIN PDC ON (MOVNOTA.CONTO = PDC.CODICEPDC)
         WHERE
           (MOVNOTA.CONTO = :CODICE) AND
           (PDC.NATURA = :NATURA) AND
           (MOVNOTA.DATA BETWEEN :DATA1 AND :DATA2)
         INTO :DARE, :AVERE, :SALDO;
      END
      SUSPEND;
    END
 END^


ALTER PROCEDURE BILANCIO2 (
    NATURA VARCHAR(20),
    DATA1 VARCHAR(10),
    DATA2 VARCHAR(10),
    CAUS1 VARCHAR(10),
    CAUS2 VARCHAR(10))
RETURNS (
    CODICE VARCHAR(20),
    MA VARCHAR(20),
    CO VARCHAR(20),
    SO VARCHAR(20),
    DESCRIZIONE VARCHAR(100),
    DARE NUMERIC(16,2),
    AVERE NUMERIC(16,2),
    SALDO NUMERIC(16,2))
AS
DECLARE VARIABLE TIPO VARCHAR(20);
BEGIN
   FOR
      SELECT
        PDC.CODICEMA AS CONTO,
        PDC.CODICEMA,
        SUM(MovNota.Dare) AS TDare,
        SUM(MovNota.Avere) AS TAvere,
        SUM(MOVNOTA.DARE-MOVNOTA.AVERE)  AS SALDO
      FROM
         PNota
           INNER JOIN (PDC INNER JOIN MovNota  ON PDC.CODICEPDC = MovNota.Conto)  ON PNota.IDX = MovNota.Idx
      WHERE
           (PDC.NATURA = :NATURA) AND
          (pnota.datamov BETWEEN :DATA1 AND :DATA2)   AND
           (((PNota.CAUS <> :CAUS1) AND (PNota.CAUS <> :CAUS2))  OR (PNota.CAUS IS NULL))
       GROUP BY
        PDC.CODICEMA
      HAVING SUM(MOVNOTA.DARE)  - SUM(MOVNOTA.AVERE) <>0
        INTO  :CODICE, :MA, :DARE, :AVERE, :SALDO
      DO
      SUSPEND;
   FOR
      SELECT
        PDC.CODICEMA || PDC.CODICECO AS CONTO,
        PDC.CODICEMA,
        PDC.CODICECO,
        SUM(MovNota.Dare) AS TDare,
        SUM(MovNota.Avere) AS TAvere,
        SUM(MOVNOTA.DARE-MOVNOTA.AVERE)  AS SALDO
      FROM
         PNota
           INNER JOIN (PDC INNER JOIN MovNota  ON PDC.CODICEPDC = MovNota.Conto)  ON PNota.IDX = MovNota.Idx
      WHERE
         (PDC.CODICECO IS NOT NULL) AND
         (PDC.CODICECO <> '') AND
           (PDC.NATURA = :NATURA) AND
          (pnota.datamov BETWEEN :DATA1 AND :DATA2)   AND
           (((PNota.CAUS <> :CAUS1) AND (PNota.CAUS <> :CAUS2))  OR (PNota.CAUS IS NULL))
       GROUP BY
        PDC.CODICEMA,
        PDC.CODICECO
      HAVING SUM(MOVNOTA.DARE)  - SUM(MOVNOTA.AVERE) <>0
      INTO  :CODICE, :MA, :CO, :DARE, :AVERE, :SALDO
      DO
      SUSPEND;

   FOR
      SELECT
        PDC.CODICEMA || PDC.CODICECO || PDC.CODICESO AS CONTO,
        PDC.CODICEMA,
        PDC.CODICECO,
        PDC.CODICESO,
        SUM(MovNota.Dare) AS TDare,
        SUM(MovNota.Avere) AS TAvere,
        SUM(MOVNOTA.DARE-MOVNOTA.AVERE)  AS SALDO
      FROM
         PNota
           INNER JOIN (PDC INNER JOIN MovNota  ON PDC.CODICEPDC = MovNota.Conto)  ON PNota.IDX = MovNota.Idx
      WHERE
         (PDC.CODICESO IS NOT NULL) AND
         (PDC.CODICESO <> '') AND
           (PDC.NATURA = :NATURA) AND
          (pnota.datamov BETWEEN :DATA1 AND :DATA2)   AND
           (((PNota.CAUS <> :CAUS1) AND (PNota.CAUS <> :CAUS2))  OR (PNota.CAUS IS NULL))
       GROUP BY
        PDC.CODICEMA,
        PDC.CODICECO,
        PDC.CODICESO
      HAVING SUM(MOVNOTA.DARE)  - SUM(MOVNOTA.AVERE) <>0
      INTO  :CODICE, :MA, :CO, :SO, :DARE, :AVERE, :SALDO
          DO
      SUSPEND;
END^


ALTER PROCEDURE BILANCIO3 (
    NATURA VARCHAR(20),
    DATA1 DATE,
    DATA2 DATE,
    CAUS1 VARCHAR(10),
    CAUS2 VARCHAR(10))
RETURNS (
    CODICE VARCHAR(20),
    MA VARCHAR(20),
    CO VARCHAR(20),
    SO VARCHAR(20),
    DESCRIZIONE VARCHAR(100),
    DARE NUMERIC(16,2),
    AVERE NUMERIC(16,2),
    SALDO NUMERIC(16,2))
AS
  DECLARE VARIABLE TIPO VARCHAR(20); 
  BEGIN 
    FOR 
       SELECT DISTINCT 
         PDC.CODICEMA, PDC.CODICECO, PDC.CODICESO, 
         PDC.CODICEMA || PDC.CODICECO || PDC.CODICESO AS CODICE, 
         SUM(MovNota.Dare) AS TDare,  SUM(MovNota.Avere) AS TAvere, 
         SUM(MOVNOTA.DARE - MOVNOTA.AVERE)  AS SALDO 
       FROM 
          PNota 
            INNER JOIN (PDC INNER JOIN MovNota  ON PDC.CODICEPDC = MovNota.Conto)  ON PNota.IDX = MovNota.Idx
       WHERE 
            (PDC.NATURA = :NATURA) AND 
            (pnota.datamov BETWEEN :DATA1 AND :DATA2)   AND 
            (((PNota.CAUS <> :CAUS1) AND (PNota.CAUS <> :CAUS2))  OR (PNota.CAUS IS NULL)) 
       GROUP BY 
         PDC.CODICEMA, PDC.CODICECO, PDC.CODICESO 
         HAVING (SUM(MovNota.Avere) - SUM(MovNota.Dare))<>0 
         INTO  :MA, :CO, :SO, :CODICE, :DARE, :AVERE, :SALDO 
       DO 
       SUSPEND; 
  END^


ALTER PROCEDURE BILANCIOX (
    NATURA VARCHAR(20),
    DATA1 DATE,
    DATA2 DATE,
    CAUS1 VARCHAR(10),
    CAUS2 VARCHAR(10))
RETURNS (
    CODICE VARCHAR(20),
    MA VARCHAR(20),
    CO VARCHAR(20),
    SO VARCHAR(20),
    DESCRIZIONE VARCHAR(100),
    DARE NUMERIC(16,2),
    AVERE NUMERIC(16,2),
    SALDO NUMERIC(16,2))
AS
  DECLARE VARIABLE TIPO VARCHAR(20); 
  BEGIN 
     FOR 
        SELECT 
           BILANCIOx1.CODICE, 
           SUM(BILANCIOx1.DARE) AS TDARE, 
           SUM(BILANCIOx1.AVERE) AS TAVERE, 
           SUM(BILANCIOx1.SALDO) AS TSALDO 
         FROM 
            BILANCIOx1(:Natura, :Data1, :Data2, :Caus1, :Caus2) 
            INNER JOIN PDC ON (BILANCIOx1.CODICE = PDC.CODICEPDC)
         WHERE 
            (BILANCIOx1.SALDO IS NOT NULL)  AND (BILANCIOx1.SALDO<>0) 
         GROUP BY 1 
           UNION 
 SELECT 
           BILANCIOx2.CODICE, 
           SUM(BILANCIOx2.DARE) AS TDARE, 
           SUM(BILANCIOx2.AVERE) AS TAVERE, 
           SUM(BILANCIOx2.SALDO) AS TSALDO 
         FROM 
            BILANCIOx2(:Natura, :Data1, :Data2, :Caus1, :Caus2) 
            INNER JOIN PDC ON (BILANCIOx2.CODICE = PDC.CODICEPDC)
         WHERE 
            (BILANCIOx2.SALDO IS NOT NULL)  AND (BILANCIOx2.SALDO<>0) 
         GROUP BY 1 
           UNION 
 SELECT 
           BILANCIOx3.CODICE, 
           SUM(BILANCIOx3.DARE) AS TDARE, 
           SUM(BILANCIOx3.AVERE) AS TAVERE, 
           SUM(BILANCIOx3.SALDO) AS TSALDO 
         FROM 
            BILANCIOx3(:Natura, :Data1, :Data2, :Caus1, :Caus2) 
            INNER JOIN PDC ON (BILANCIOx3.CODICE = PDC.CODICEPDC)
         WHERE 
            (BILANCIOx3.SALDO IS NOT NULL)  AND (BILANCIOx3.SALDO<>0) 
         GROUP BY 1 
          INTO  :CODICE, :DARE, :AVERE, :SALDO 
        DO 
        SUSPEND; 
    END^


ALTER PROCEDURE BILANCIOX1 (
    NATURA VARCHAR(20),
    DATA1 DATE,
    DATA2 DATE,
    CAUS1 VARCHAR(10),
    CAUS2 VARCHAR(10))
RETURNS (
    CODICE VARCHAR(20),
    MA VARCHAR(20),
    CO VARCHAR(20),
    SO VARCHAR(20),
    DESCRIZIONE VARCHAR(100),
    DARE NUMERIC(16,2),
    AVERE NUMERIC(16,2),
    SALDO NUMERIC(16,2))
AS
  DECLARE VARIABLE TIPO VARCHAR(20); 
  BEGIN 
   FOR 
         SELECT 
            BILANCIO3.MA AS CODICE, SUM(BILANCIO3.DARE) AS TDARE, 
            SUM(BILANCIO3.AVERE) AS TAVERE, SUM(BILANCIO3.SALDO) AS TSALDO 
          FROM 
            BILANCIO3(:Natura, :Data1, :Data2, :Caus1, :Caus2) 
            INNER JOIN PDC ON (BILANCIO3.CODICE = PDC.CODICEPDC)
          WHERE 
            (BILANCIO3.SALDO IS NOT NULL)  AND (BILANCIO3.SALDO<>0) 
          GROUP BY 1 
          INTO  :CODICE, :DARE, :AVERE, :SALDO 
          DO 
          SUSPEND; 
 END^


ALTER PROCEDURE BILANCIOX2 (
    NATURA VARCHAR(20),
    DATA1 DATE,
    DATA2 DATE,
    CAUS1 VARCHAR(10),
    CAUS2 VARCHAR(10))
RETURNS (
    CODICE VARCHAR(20),
    MA VARCHAR(20),
    CO VARCHAR(20),
    SO VARCHAR(20),
    DESCRIZIONE VARCHAR(100),
    DARE NUMERIC(16,2),
    AVERE NUMERIC(16,2),
    SALDO NUMERIC(16,2))
AS
  DECLARE VARIABLE TIPO VARCHAR(20); 
  BEGIN 
   FOR 
         SELECT 
            BILANCIO3.MA || BILANCIO3.CO AS CODICE, SUM(BILANCIO3.DARE) AS TDARE, 
            SUM(BILANCIO3.AVERE) AS TAVERE, SUM(BILANCIO3.SALDO) AS TSALDO 
          FROM 
            BILANCIO3(:Natura, :Data1, :Data2, :Caus1, :Caus2) 
            INNER JOIN PDC ON (BILANCIO3.CODICE = PDC.CODICEPDC)
          WHERE 
            (BILANCIO3.SALDO IS NOT NULL)  AND (BILANCIO3.SALDO<>0) 
          GROUP BY 1 
          INTO  :CODICE, :DARE, :AVERE, :SALDO 
          DO 
          SUSPEND; 
 END^


ALTER PROCEDURE BILANCIOX3 (
    NATURA VARCHAR(20),
    DATA1 DATE,
    DATA2 DATE,
    CAUS1 VARCHAR(10),
    CAUS2 VARCHAR(10))
RETURNS (
    CODICE VARCHAR(20),
    MA VARCHAR(20),
    CO VARCHAR(20),
    SO VARCHAR(20),
    DESCRIZIONE VARCHAR(100),
    DARE NUMERIC(16,2),
    AVERE NUMERIC(16,2),
    SALDO NUMERIC(16,2))
AS
  DECLARE VARIABLE TIPO VARCHAR(20); 
  BEGIN 
   FOR 
         SELECT 
            BILANCIO3.MA || BILANCIO3.CO || BILANCIO3.SO AS CODICE, SUM(BILANCIO3.DARE) AS TDARE, 
            SUM(BILANCIO3.AVERE) AS TAVERE, SUM(BILANCIO3.SALDO) AS TSALDO 
          FROM 
            BILANCIO3(:Natura, :Data1, :Data2, :Caus1, :Caus2) 
            INNER JOIN PDC ON (BILANCIO3.CODICE = PDC.CODICEPDC)
          WHERE 
            (BILANCIO3.SALDO IS NOT NULL)  AND (BILANCIO3.SALDO<>0) 
          GROUP BY 1 
          INTO  :CODICE, :DARE, :AVERE, :SALDO 
          DO 
          SUSPEND; 
 END^


ALTER PROCEDURE ELIMARTDEP2 (
    ANNO VARCHAR(4))
AS
  DECLARE VARIABLE CODICE VARCHAR(17);  
  BEGIN    
          FOR SELECT DISTINCT ARTGIA.CODICE  FROM    ARTGIA   
              WHERE   (ARTGIA.ANNO = :ANNO) GROUP BY  ARTGIA.CODICE   
              HAVING   (COUNT(ARTGIA.CODICE) > 1)  
              INTO :CODICE  
             DO BEGIN   
                 DELETE FROM ARTGIA WHERE ARTGIA.ANNO=:ANNO AND ARTGIA.CODICE=:CODICE;   
                 INSERT INTO ARTGIA (CODICE, CODDEP,  
                                        GIA,QTAVEN,    
                                        QTAACQ,RIM,     
                                        SCORTA, ANNO)   
                           VALUES(:CODICE, 0,   
                                  0,0,          
                                  0,0,           
                                  0, :ANNO);      
             END    
      END^


ALTER PROCEDURE FTCLITOT (
    TIPO VARCHAR(20),
    IDX INTEGER)
RETURNS (
    CIVA VARCHAR(20),
    SIMP NUMERIC(18,6),
    SIVA NUMERIC(18,6),
    TOT NUMERIC(18,6))
AS
BEGIN           FOR SELECT              FTCLITOTDDT.CIVA,              SUM(FTCLITOTDDT.SIMP) AS IMP,              SUM(FTCLITOTDDT.SIVA) AS IVA,              SUM(FTCLITOTDDT.TOT) AS TOT            FROM                FTCLITOTDDT(:TIPO,:IDX)            GROUP BY               FTCLITOTDDT.CIVA            INTO  :CIVA, :SIMP, :SIVA, :TOT              DO            SUSPEND;                    END^


ALTER PROCEDURE FTCLITOTDDT (
    TIPO VARCHAR(20),
    ID INTEGER)
RETURNS (
    IDX INTEGER,
    IDDOCPRI INTEGER,
    NUMDOC INTEGER,
    DATA DATE,
    SIMP NUMERIC(18,6),
    SIVA NUMERIC(18,6),
    TOT NUMERIC(18,6),
    CIVA VARCHAR(10))
AS
BEGIN       IF (TIPO='IDX') THEN BEGIN          FOR SELECT               CLIDOC.IDX, CLIDOC.IDDOCPRI,                        CLIDOC.NUMDOC, CLIDOC.DATA,               CLIDOCDET.CODIVA,               SUM( CLIDOCDET.IMP ) AS SIMP,               SUM( CLIDOCDET.IVA ) AS SIVA,               SUM( CLIDOCDET.IMP  + CLIDOCDET.IVA ) AS TOT          FROM  CLIDOC               INNER JOIN CLIDOCDET ON (CLIDOC.IDX=CLIDOCDET.IDX)          WHERE              (CLIDOC.IDX = :ID)          GROUP BY             CLIDOC.IDX, CLIDOC.IDDOCPRI, CLIDOC.NUMDOC, CLIDOC.DATA, CLIDOCDET.CODIVA          INTO :IDX, :IDDOCPRI, :NUMDOC, :DATA, :CIVA,  :SIMP, :SIVA, :TOT          DO          SUSPEND;       END ELSE BEGIN       FOR SELECT               CLIDOC.IDX, CLIDOC.IDDOCPRI,               CLIDOC.NUMDOC, CLIDOC.DATA,               CLIDOCDET.CODIVA,               SUM( CLIDOCDET.IMP ) AS SIMP,               SUM( CLIDOCDET.IVA ) AS SIVA,                  SUM( CLIDOCDET.IMP  + CLIDOCDET.IVA ) AS TOT          FROM  CLIDOC               INNER JOIN CLIDOCDET ON (CLIDOC.IDX=CLIDOCDET.IDX)          WHERE              (CLIDOC.IDDOCPRI = :ID)          GROUP BY             CLIDOC.IDX, CLIDOC.IDDOCPRI, CLIDOC.NUMDOC, CLIDOC.DATA, CLIDOCDET.CODIVA          INTO :IDX, :IDDOCPRI, :NUMDOC, :DATA, :CIVA,  :SIMP, :SIVA, :TOT          DO          SUSPEND;       END     END^


ALTER PROCEDURE FTFORTOT (
    TIPO VARCHAR(20),
    IDX INTEGER)
RETURNS (
    CIVA VARCHAR(20),
    SIMP NUMERIC(18,2),
    SIVA NUMERIC(18,2),
    TOT NUMERIC(18,2))
AS
 BEGIN 
       FOR SELECT 
          FTFORTOTDDT.CIVA, 
          SUM(FTFORTOTDDT.SIMP) AS IMP, 
          SUM(FTFORTOTDDT.SIVA) AS IVA, 
          SUM(FTFORTOTDDT.TOT) AS TOT 
        FROM 
            FTFORTOTDDT(:TIPO,:IDX) 
        GROUP BY 
           FTFORTOTDDT.CIVA 
        INTO  :CIVA, :SIMP, :SIVA, :TOT 
        DO 
        SUSPEND; 
  END^


ALTER PROCEDURE FTFORTOTDDT (
    TIPO VARCHAR(20),
    ID INTEGER)
RETURNS (
    IDX INTEGER,
    IDDOCPRI INTEGER,
    NUMDOC INTEGER,
    DATA DATE,
    SIMP NUMERIC(18,2),
    SIVA NUMERIC(18,2),
    TOT NUMERIC(18,2),
    CIVA VARCHAR(20))
AS
 BEGIN        
     IF (TIPO='IDX') THEN BEGIN 
        FOR SELECT                                             
             FORDOC.IDX, FORDOC.IDDOCPRI, 
             FORDOC.NUMDOC, FORDOC.DATA, 
             FORDOCDET.CODIVA, 
             SUM( FORDOCDET.IMP ) AS SIMP, 
             SUM( FORDOCDET.IVA ) AS SIVA, 
             SUM( FORDOCDET.IMP  + FORDOCDET.IVA ) AS TOT 
        FROM  FORDOC 
             INNER JOIN FORDOCDET ON (FORDOC.IDX=FORDOCDET.IDX) 
        WHERE 
            (FORDOC.IDX = :ID) 
        GROUP BY 
           FORDOC.IDX, FORDOC.IDDOCPRI, FORDOC.NUMDOC, FORDOC.DATA, FORDOCDET.CODIVA 
        INTO :IDX, :IDDOCPRI, :NUMDOC, :DATA, :CIVA,  :SIMP, :SIVA, :TOT 
        DO 
        SUSPEND; 
     END ELSE BEGIN 
     FOR SELECT 
             FORDOC.IDX, FORDOC.IDDOCPRI, 
             FORDOC.NUMDOC, FORDOC.DATA, 
             FORDOCDET.CODIVA, 
             SUM( FORDOCDET.IMP ) AS SIMP, 
             SUM( FORDOCDET.IVA ) AS SIVA, 
             SUM( FORDOCDET.IMP  + FORDOCDET.IVA ) AS TOT 
        FROM  FORDOC 
             INNER JOIN FORDOCDET ON (FORDOC.IDX=FORDOCDET.IDX) 
        WHERE 
            (FORDOC.IDDOCPRI = :ID) 
        GROUP BY 
           FORDOC.IDX, FORDOC.IDDOCPRI, FORDOC.NUMDOC, FORDOC.DATA, FORDOCDET.CODIVA 
        INTO :IDX, :IDDOCPRI, :NUMDOC, :DATA, :CIVA,  :SIMP, :SIVA, :TOT 
        DO 
        SUSPEND; 
     END 
   END^


ALTER PROCEDURE GETNEXTID (
    GENERATORNAME VARCHAR(30))
RETURNS (
    RECID INTEGER)
AS
 BEGIN 
    IF (:GENERATORNAME = 'RESOURCEIDGEN') THEN 
    BEGIN 
      RECID = GEN_ID (PMRESOURCEIDGEN, 1); 
    END ELSE 
      IF (:GENERATORNAME = 'TASKIDGEN') THEN 
      BEGIN 
        RECID = GEN_ID (PMTASKIDGEN, 1); 
      END ELSE 
        IF (:GENERATORNAME = 'EVENTIDGEN') THEN 
        BEGIN 
          RECID = GEN_ID (PMEVENTIDGEN, 1); 
        END ELSE 
          IF (:GENERATORNAME = 'CONTACTIDGEN') THEN 
            RECID = GEN_ID (PMCONTACTIDGEN, 1); 
SUSPEND; END^


ALTER PROCEDURE RICCLIIMPART (
    ANNO VARCHAR(4))
AS
DECLARE VARIABLE idm INTEGER;
DECLARE VARIABLE qta FLOAT;
DECLARE VARIABLE prezzo FLOAT;
DECLARE VARIABLE codiva VARCHAR(10);
DECLARE VARIABLE aliva FLOAT;
DECLARE VARIABLE iva FLOAT;
DECLARE VARIABLE imp FLOAT;
DECLARE VARIABLE tiva VARCHAR(20);
BEGIN

    FOR SELECT   CLIDOCDET.IDM,
                 CLIDOCDET.QTA,
                 CLIDOCDET.PREZZO,
                 CLIDOCDET.CODIVA
        FROM CLIDOC
             INNER JOIN CLIDOCDET ON (CLIDOC.IDX = CLIDOCDET.IDX)
        WHERE ((EXTRACT(YEAR FROM CLIDOC.DATA ) = :ANNO))
        INTO :IDM, :QTA, :PREZZO, :CODIVA
       DO BEGIN
           SELECT  CODIVA.ALI,  CODIVA.TIPO
                  FROM CODIVA
                  WHERE (CODIVA.CODIVA = :codiva)
                  INTO :ALIVA, :TIVA;
           IF (TIVA <> 'Esente') THEN BEGIN
              IVA = (QTA * PREZZO * ALIVA) / 100;
              IMP = (QTA * PREZZO);
              UPDATE CLIDOCDET
                 SET IVA = :IVA, IMP = :IMP
              WHERE IDM = :IDM;
           END
       END
END^


ALTER PROCEDURE RIMMESEPREC (
    MESE INTEGER,
    ANNO VARCHAR(4),
    CODICE VARCHAR(17))
RETURNS (
    RIMPREC FLOAT)
AS
 BEGIN 
   IF (MESE>1) THEN BEGIN 
      SELECT SUM(ARTSTAT.QTAACQ - ARTSTAT.QTAVEN) AS RIM 
         FROM ARTSTAT 
          WHERE 
          (ARTSTAT.MESE BETWEEN 1 AND :MESE) AND 
           ARTSTAT.ANNO = :ANNO AND 
           ARTSTAT.CODICE = :CODICE 
      INTO :RimPrec; 
   END ELSE BEGIN 
      RimPrec=0; 
   END 
   SUSPEND; 
 END^


ALTER PROCEDURE TOPCLI (
    CODART VARCHAR(17),
    CLIFOR VARCHAR(22))
RETURNS (
    CODICEPDC VARCHAR(50),
    DESCRIZIONE VARCHAR(200),
    TIPO VARCHAR(20),
    NUMDOC FLOAT,
    DATA DATE,
    PREZZO FLOAT,
    PRZNETTO FLOAT)
AS
  DECLARE VARIABLE SC1 FLOAT; 
  DECLARE VARIABLE SC2 FLOAT;  
  DECLARE VARIABLE SC3 FLOAT;  
  BEGIN   
    IF (CLIFOR <> '') THEN 
      FOR    
     SELECT  FIRST 10     
    CLIDOC.CODICEPDC,  PDC.DESCRIZIONE, CLIDOC.TIPO,  CLIDOC.NUMDOC,
    CLIDOC.DATA,  CLIDOCDET.PREZZO,  CLIDOCDET.SC1, CLIDOCDET.SC2,CLIDOCDET.SC3   
  FROM  
   CLIDOC  
   INNER JOIN CLIDOCDET ON (CLIDOC.IDX=CLIDOCDET.IDX)  
    AND (CLIDOCDET.IDX=CLIDOC.IDX)  
   INNER JOIN PDC ON (CLIDOC.CODICEPDC=PDC.CODICEPDC)
  WHERE  
    (CLIDOC.CODICEPDC =:CLIFOR) AND
    (CLIDOCDET.CODICE = :CODART) AND (   
    (CLIDOC.TIPO = 'DDT') OR  (CLIDOC.TIPO = 'FA') OR (CLIDOC.TIPO = 'COR'))   
  ORDER BY   
    CLIDOC.DATA DESC   
      INTO  :CODICEPDC, :DESCRIZIONE, :TIPO, :NUMDOC, :DATA, :PREZZO, :SC1, :SC2, :SC3
          DO BEGIN   
             PRZNETTO = PREZZO;   
             IF (SC1>0) THEN PRZNETTO = :PRZNETTO - :PRZNETTO * :SC1 /100;  
             IF (SC2>0) THEN PRZNETTO = :PRZNETTO - :PRZNETTO * :SC2 /100;   
             IF (SC3>0) THEN PRZNETTO = :PRZNETTO - :PRZNETTO * :SC3 /100;   
             SUSPEND;  
          END   
    ELSE 
      FOR    
     SELECT  FIRST 10     
    CLIDOC.CODICEPDC,  PDC.DESCRIZIONE, CLIDOC.TIPO,  CLIDOC.NUMDOC,
    CLIDOC.DATA,  CLIDOCDET.PREZZO,  CLIDOCDET.SC1, CLIDOCDET.SC2,CLIDOCDET.SC3   
  FROM  
   CLIDOC  
   INNER JOIN CLIDOCDET ON (CLIDOC.IDX=CLIDOCDET.IDX)  
    AND (CLIDOCDET.IDX=CLIDOC.IDX)  
   INNER JOIN PDC ON (CLIDOC.CODICEPDC=PDC.CODICEPDC)
  WHERE  
    (CLIDOCDET.CODICE = :CODART) AND (   
    (CLIDOC.TIPO = 'DDT') OR  (CLIDOC.TIPO = 'FA') OR (CLIDOC.TIPO = 'COR'))   
  ORDER BY   
    CLIDOC.DATA DESC   
      INTO  :CODICEPDC, :DESCRIZIONE, :TIPO, :NUMDOC, :DATA, :PREZZO, :SC1, :SC2, :SC3
          DO BEGIN   
             PRZNETTO = PREZZO;   
             IF (SC1>0) THEN PRZNETTO = :PRZNETTO - :PRZNETTO * :SC1 /100;  
             IF (SC2>0) THEN PRZNETTO = :PRZNETTO - :PRZNETTO * :SC2 /100;   
             IF (SC3>0) THEN PRZNETTO = :PRZNETTO - :PRZNETTO * :SC3 /100;   
             SUSPEND;  
          END   
  END^


ALTER PROCEDURE TOPFOR (
    CODART VARCHAR(17),
    CLIFOR VARCHAR(22))
RETURNS (
    CODICEPDC VARCHAR(50),
    DESCRIZIONE VARCHAR(200),
    TIPO VARCHAR(20),
    NUMDOC FLOAT,
    DATA DATE,
    PREZZO FLOAT,
    PRZNETTO FLOAT)
AS
  DECLARE VARIABLE SC1 FLOAT; 
  DECLARE VARIABLE SC2 FLOAT;  
  DECLARE VARIABLE SC3 FLOAT;  
  BEGIN   
    IF (CLIFOR <> '') THEN 
      FOR    
     SELECT  FIRST 10     
    FORDOC.CODICEPDC,  PDC.DESCRIZIONE, FORDOC.TIPO,  FORDOC.NUMDOC,
    FORDOC.DATA,  FORDOCDET.PREZZO,  FORDOCDET.SC1, FORDOCDET.SC2,FORDOCDET.SC3   
  FROM  
   FORDOC  
   INNER JOIN FORDOCDET ON (FORDOC.IDX=FORDOCDET.IDX)  
    AND (FORDOCDET.IDX=FORDOC.IDX)  
   INNER JOIN PDC ON (FORDOC.CODICEPDC=PDC.CODICEPDC)
  WHERE  
    (FORDOC.CODICEPDC =:CLIFOR) AND
    (FORDOCDET.CODICE = :CODART) AND (   
    (FORDOC.TIPO = 'DDT') OR  (FORDOC.TIPO = 'FA') OR (FORDOC.TIPO = 'COR'))   
  ORDER BY   
    FORDOC.DATA DESC   
      INTO  :CODICEPDC, :DESCRIZIONE, :TIPO, :NUMDOC, :DATA, :PREZZO, :SC1, :SC2, :SC3
          DO BEGIN   
             PRZNETTO = PREZZO;   
             IF (SC1>0) THEN PRZNETTO = :PRZNETTO - :PRZNETTO * :SC1 /100;  
             IF (SC2>0) THEN PRZNETTO = :PRZNETTO - :PRZNETTO * :SC2 /100;   
             IF (SC3>0) THEN PRZNETTO = :PRZNETTO - :PRZNETTO * :SC3 /100;   
             SUSPEND;  
          END   
    ELSE 
      FOR    
     SELECT  FIRST 10     
    FORDOC.CODICEPDC,  PDC.DESCRIZIONE, FORDOC.TIPO,  FORDOC.NUMDOC,
    FORDOC.DATA,  FORDOCDET.PREZZO,  FORDOCDET.SC1, FORDOCDET.SC2,FORDOCDET.SC3   
  FROM  
   FORDOC  
   INNER JOIN FORDOCDET ON (FORDOC.IDX=FORDOCDET.IDX)  
    AND (FORDOCDET.IDX=FORDOC.IDX)  
   INNER JOIN PDC ON (FORDOC.CODICEPDC=PDC.CODICEPDC)
  WHERE  
    (FORDOCDET.CODICE = :CODART) AND (   
    (FORDOC.TIPO = 'DDT') OR  (FORDOC.TIPO = 'FA') OR (FORDOC.TIPO = 'COR'))   
  ORDER BY   
    FORDOC.DATA DESC   
      INTO  :CODICEPDC, :DESCRIZIONE, :TIPO, :NUMDOC, :DATA, :PREZZO, :SC1, :SC2, :SC3
          DO BEGIN   
             PRZNETTO = PREZZO;   
             IF (SC1>0) THEN PRZNETTO = :PRZNETTO - :PRZNETTO * :SC1 /100;  
             IF (SC2>0) THEN PRZNETTO = :PRZNETTO - :PRZNETTO * :SC2 /100;   
             IF (SC3>0) THEN PRZNETTO = :PRZNETTO - :PRZNETTO * :SC3 /100;   
             SUSPEND;  
          END   
  END^


ALTER PROCEDURE VISPARAP (
    MA VARCHAR(30),
    CAUSC VARCHAR(5),
    CAUSA VARCHAR(5))
RETURNS (
    TAVERE NUMERIC(15,2),
    SALDO NUMERIC(15,2),
    TDARE NUMERIC(15,2),
    DESCR VARCHAR(100),
    NUMDOC VARCHAR(20),
    CONTO VARCHAR(30))
AS
 BEGIN                            
   FOR SELECT                     
      MovNota.Conto,               
      movnota.numdoc,              
      PDC.DESCRIZIONE,             
      SUM(MovNota.Dare) AS TDare,   
      SUM(MovNota.Avere) AS TAvere,  
      SUM(MovNota.Dare)-SUM(MovNota.Avere) AS Saldo   
 FROM          
      PNota INNER JOIN    
         (PDC RIGHT JOIN MOVNOTA ON PDC.CODICEPDC = MOVNOTA.Conto)
         ON PNota.IDX = MOVNOTA.Idx     
 WHERE      
        (MOVNOTA.Conto LIKE :ma)   AND ((PChiusa IS  NULL)  OR  (PChiusa='A'))
         AND NOT(MovNota.NumDoc IS NULL) 
         AND MovNota.NumDoc <> '' 
  GROUP BY
       PDC.CODICEMA,
       PDC.CODICECO, 
       PDC.CODICESO, 
       MovNota.Conto, 
       movnota.numdoc, 
       PDC.DESCRIZIONE 
 HAVING         
    (  (SUM(MovNota.Dare) - SUM(MovNota.Avere)) > 0.001 OR 
       (SUM(MovNota.Dare) - SUM(MovNota.Avere)) < -0.001  )
 ORDER BY  
       PDC.DESCRIZIONE, 
       PDC.CODICEMA,   
       PDC.CODICECO,   
       PDC.CODICESO    
      INTO :CONTO, :NUMDOC, :DESCR, :TDARE, :TAVERE, :SALDO   DO  SUSPEND;
 END^



SET TERM ; ^



/******************************************************************************/
/****                             Descriptions                             ****/
/******************************************************************************/
